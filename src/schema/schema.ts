/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

// Export interface for module system compatibility
export interface paths {
    "/accounts/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show my account details */
        get: operations["getSelfAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update my account */
        patch: operations["patchSelfAccount"];
        trace?: never;
    };
    "/accounts/self/convert-to-organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Convert my account to an Organization */
        post: operations["convertSelfAccountToOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List actions
         * @deprecated
         */
        get: operations["listActions"];
        put?: never;
        /**
         * Create an action
         * @deprecated
         */
        post: operations["createAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action
         * @deprecated
         */
        get: operations["getAction"];
        put?: never;
        post?: never;
        /**
         * Delete an action
         * @deprecated
         */
        delete: operations["deleteAction"];
        options?: never;
        head?: never;
        /**
         * Update an action
         * @deprecated
         */
        patch: operations["patchAction"];
        trace?: never;
    };
    "/workflows/{workflow_id}/actions/{action_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Render an action
         * @deprecated
         */
        get: operations["renderAction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/actions/{action_id}/send-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a test of an action
         * @deprecated
         */
        post: operations["sendTestAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all campaigns */
        get: operations["listCampaigns"];
        put?: never;
        /** Create a campaign */
        post: operations["createCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a campaign details */
        get: operations["getCampaign"];
        put?: never;
        post?: never;
        /** Delete a campaign */
        delete: operations["deleteCampaign"];
        options?: never;
        head?: never;
        /** Update a campaign */
        patch: operations["patchCampaign"];
        trace?: never;
    };
    "/campaigns/{campaign_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Render a campaign */
        get: operations["renderCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/send-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a test email */
        post: operations["sendTestEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Schedule a campaign */
        post: operations["scheduleCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/unschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unschedule a campaign */
        post: operations["unscheduleCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reschedule a campaign */
        post: operations["rescheduleCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suspend a campaign */
        post: operations["suspendCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a campaign */
        post: operations["resumeCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a campaign */
        post: operations["cancelCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive a campaign
         * @description You can only delete a campaign when the status is draft. However, if you want to remove a campaign from your list of active campaigns, you can archive it.
         */
        post: operations["archiveCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unarchive a campaign */
        post: operations["unarchiveCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/revisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all campaign revisions */
        get: operations["getCampaignRevisions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaign-blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all campaign blueprints */
        get: operations["listCampaignBlueprints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaign-blueprints/{blueprint_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a campaign blueprint */
        get: operations["getCampaignBlueprint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaign-blueprints/{blueprint_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Render campaign blueprint */
        get: operations["renderCampaignBlueprint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/add-interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add interest(s) to contact(s) */
        post: operations["addInterestsToContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show contacts of a list */
        get: operations["listContactsOfList"];
        put?: never;
        /** Add a contact */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/segments/{segment_id}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show contacts of a segment */
        get: operations["listContactsOfSegment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tags multiple contacts */
        post: operations["tagMultipleContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/untag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Untags multiple contacts */
        post: operations["untagMultipleContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/{contact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a contact details */
        get: operations["getContact"];
        put?: never;
        post?: never;
        /** Delete a contact */
        delete: operations["deleteContact"];
        options?: never;
        head?: never;
        /** Update a contact */
        patch: operations["patchContact"];
        trace?: never;
    };
    "/lists/{list_id}/import-contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import contacts
         * @description Synchronize your own list with Cakemail by importing to your active, unsubscribed or delete contacts.
         */
        post: operations["importContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/{contact_id}/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unsubscribe a contact from a list */
        post: operations["unsubscribeContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/{contact_id}/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Tags a contact
         * @deprecated
         */
        post: operations["tagContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/{contact_id}/untag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Untags a contact
         * @deprecated
         */
        post: operations["untagContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/contacts/remove-interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove interest(s) from contact(s) */
        post: operations["removeInterestsFromContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/custom-attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all custom attributes */
        get: operations["listCustomAttributes"];
        put?: never;
        /** Create a custom attribute */
        post: operations["createCustomAttribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/custom-attributes/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a custom attribute */
        get: operations["getCustomAttribute"];
        put?: never;
        post?: never;
        /** Delete a custom attribute */
        delete: operations["deleteCustomAttribute"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/dkim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Dkim Keys */
        get: operations["list_dkim_keys_brands_default_dkim_get"];
        put?: never;
        /** Create Dkim Key */
        post: operations["create_dkim_key_brands_default_dkim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/dkim/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dkim Key */
        get: operations["get_dkim_key_brands_default_dkim__id__get"];
        put?: never;
        post?: never;
        /** Delete Dkim Key */
        delete: operations["delete_dkim_key_brands_default_dkim__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/domains/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show domains
         * @description Show the Tracking and Bounce domains.
         */
        get: operations["showDomains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change domains
         * @description Change the Tracking and Bounce domains.
         */
        patch: operations["patchDomains"];
        trace?: never;
    };
    "/brands/default/domains/default/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate domains
         * @description Validate and return the DNS entries for the Tracking and the Bounce domains.
         */
        get: operations["validateDomains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send an email
         * @deprecated
         */
        post: operations["sendEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show email stats */
        get: operations["getEmailsStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show email activity logs
         * @deprecated
         */
        get: operations["getEmailLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email-group-ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Email Group Ids
         * @deprecated
         */
        get: operations["listEmailGroupIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email-group-ids/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Edit an Email Group Id
         * @deprecated
         */
        patch: operations["patchEmailGroupId"];
        trace?: never;
    };
    "/v2/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit an email
         * @description Submit an email to be sent.
         *
         *     Email status lifecycle:
         *     - `submitted`: Email has been submitted to the API using this endpoint.
         *     - `queued`: Email has been queued for delivery.
         *     - `delivered`: Email has been successfully delivered.
         *     - `rejected`: Email has been rejected by the API.  See the `reason` in `metadata` for more information.
         *     - `error`: Email has encountered an error.  See the `error` in `metadata` for more information.
         *     - `open`: Email has been opened.
         *     - `click`: Email has been clicked.
         *     - `bounce`: Email has bounced.
         *     - `spam`: Email has been marked as spam.
         *     - `unsubscribe`: Email has been unsubscribed.
         *     - `global_unsubscribe`: Email has been globally unsubscribed (suppressed by user request).
         */
        post: operations["submitEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/emails/{email_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a submitted email */
        get: operations["showEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/emails/{email_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Render a submitted email */
        get: operations["renderEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email-tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Email Tags
         * @description Email Tags are used to group sent emails into a logical group or category.  This endpoint will return a list of
         *     all the Email Tags that have been created for the account.
         *
         *     To create a tag, specify its name at send time in the `tags` field of the email object.  If the tag does not exist,
         *     it will be created automatically.
         */
        get: operations["listEmailTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/logs/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show Email API activity logs */
        get: operations["getEmailAPILogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/emails-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show Email API activity summary */
        get: operations["getEmailAPISummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/reports/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show Email API statistics
         * @description Generate email statistics for the Email API.
         *
         *     Statistics are aggregated with a minimum granularity of 5 minutes. As a result, the
         *     returned intervals may extend beyond the requested time range. Intervals are always
         *     whole, except for the last interval if the requested end time is the current time.
         */
        get: operations["getEmailAPIStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/transactional-email-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactional Email Templates
         * @deprecated
         * @description List Transactional Email Templates
         */
        get: operations["listTransactionalEmailTemplates"];
        put?: never;
        /**
         * Create a Transactional Email Template
         * @deprecated
         * @description Create a Transactional Email Template
         */
        post: operations["createTransactionalEmailTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/transactional-email-templates/{transactional_email_template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a Transactional Email Template
         * @deprecated
         * @description Show a Transactional Email Template
         */
        get: operations["showTransactionalEmailTemplate"];
        put?: never;
        post?: never;
        /**
         * Delete a Transactional Email Template
         * @deprecated
         * @description Delete a Transactional Email Template
         */
        delete: operations["deleteTransactionalEmailTemplate"];
        options?: never;
        head?: never;
        /**
         * Update a Transactional Email Template
         * @deprecated
         * @description Update a Transactional Email Template
         */
        patch: operations["updateTransactionalEmailTemplate"];
        trace?: never;
    };
    "/lists/{list_id}/transactional-email-templates/{transactional_email_template_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a Transactional Email from a Template to a contact
         * @deprecated
         * @description Send a Transactional Email from a Template to a single contact in the list.
         *
         *     If you need to send to multiple contacts at once, you should use the Campaigns API, which are designed for
         *     bulk sending.
         */
        post: operations["sendTransactionalEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/transactional-email-templates/{transactional_email_template_id}/send-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a Test Transactional Email from a Template
         * @deprecated
         * @description Send a Test Transactional Email from a Template
         */
        post: operations["sendTestTransactionalEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/transactional-email-templates/{transactional_email_template_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Render a Transactional Email Template
         * @deprecated
         * @description Render a Transactional Email Template
         */
        post: operations["renderTransactionalEmailTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all forms */
        get: operations["listForms"];
        put?: never;
        /** Create a form */
        post: operations["createForm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms/{form_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a form details */
        get: operations["getForm"];
        put?: never;
        post?: never;
        /** Delete a form */
        delete: operations["deleteForm"];
        options?: never;
        head?: never;
        /** Update a form */
        patch: operations["patchForm"];
        trace?: never;
    };
    "/links/{link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a link information */
        get: operations["getLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaign_id}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a campaign links */
        get: operations["listLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/actions/{action_id}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show action links
         * @deprecated
         */
        get: operations["listActionLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all lists */
        get: operations["listLists"];
        put?: never;
        /** Create a List */
        post: operations["createList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a list parameters */
        get: operations["getList"];
        put?: never;
        post?: never;
        /** Delete a List */
        delete: operations["deleteList"];
        options?: never;
        head?: never;
        /** Update a list parameters */
        patch: operations["patchList"];
        trace?: never;
    };
    "/lists/{list_id}/accept-policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept policy for a list */
        post: operations["acceptListPolicy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Archive a list */
        post: operations["archiveList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/forms/{form_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable a subscription form endpoint */
        post: operations["enableSubscriptionFormEndpoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/forms/{form_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable a subscription form endpoint */
        post: operations["disableSubscriptionFormEndpoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription form endpoints */
        get: operations["listSubscriptionFormEndpoints"];
        put?: never;
        /** Create a subscription form endpoint */
        post: operations["createSubscriptionFormEndpoint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/forms/{form_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a subscription form endpoint */
        get: operations["showSubscriptionFormEndpoint"];
        put?: never;
        post?: never;
        /** Delete a subscription form endpoint */
        delete: operations["deleteSubscriptionFormEndpoint"];
        options?: never;
        head?: never;
        /** Patch a subscription form endpoint */
        patch: operations["patchSubscriptionFormEndpoint"];
        trace?: never;
    };
    "/lists/{list_id}/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all Contacts Exports
         * @description Show all Contacts Exports.
         */
        get: operations["listContactsExports"];
        put?: never;
        /**
         * Create a Contacts Export
         * @description Create a Contacts Export to a CSV file.
         */
        post: operations["exportContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/exports/{export_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a Contacts Export
         * @description Show a Contacts Export.
         */
        get: operations["getContactsExport"];
        put?: never;
        post?: never;
        /**
         * Delete a Contacts Export
         * @description Delete a Contacts Export.
         */
        delete: operations["deleteContactsExport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/exports/{export_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a Contacts Export
         * @description Download a Contacts Export.
         */
        get: operations["downloadContactsExport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/lists/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show list logs */
        get: operations["getListLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show campaign logs */
        get: operations["getCampaignLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/workflows/{workflow_id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show action logs */
        get: operations["getActionLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/campaigns/{campaign_id}/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all campaign log exports
         * @description Show all campaign log exports
         */
        get: operations["listCampaignLogExports"];
        put?: never;
        /**
         * Create a campaign log export
         * @description Export to CSV a campaign log.
         */
        post: operations["campaignLogExportCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/campaigns/{campaign_id}/exports/{campaign_log_export_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a campaign log export
         * @description Returns the URL to download the exported CSV file.
         */
        get: operations["campaignLogExportDownload"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/lists/{list_id}/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all list logs exports
         * @description Show all list logs exports
         */
        get: operations["listListLogsExports"];
        put?: never;
        /**
         * Create a list log export
         * @description Export List Activity Logs to CSV.
         */
        post: operations["listLogsExportCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/lists/{list_id}/exports/{list_logs_export_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a list logs export
         * @description Returns the URL to download the exported CSV file.
         */
        get: operations["listLogsExportDownload"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/logos/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload a default logo */
        put: operations["uploadDefaultLogo"];
        post?: never;
        /** Delete the default logo */
        delete: operations["deleteDefaultLogo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all segments */
        get: operations["listSegments"];
        put?: never;
        /** Create a segment */
        post: operations["createSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/segments/{segment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a segment details */
        get: operations["getSegment"];
        put?: never;
        post?: never;
        /** Delete a segment */
        delete: operations["deleteSegment"];
        options?: never;
        head?: never;
        /** Update a segment */
        patch: operations["patchSegment"];
        trace?: never;
    };
    "/brands/default/senders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all senders */
        get: operations["listSenders"];
        put?: never;
        /** Add a sender */
        post: operations["createSender"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/senders/{sender_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a sender details */
        get: operations["getSender"];
        put?: never;
        post?: never;
        /** Delete a sender */
        delete: operations["deleteSender"];
        options?: never;
        head?: never;
        /** Update a sender */
        patch: operations["patchSender"];
        trace?: never;
    };
    "/brands/default/senders/confirm-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm a sender */
        post: operations["confirmSender"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/senders/{sender_id}/resend-confirmation-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend confirmation email */
        post: operations["resendConfirmationEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all Interests */
        get: operations["listInterests"];
        put?: never;
        /** Create an Interest */
        post: operations["createInterest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{list_id}/interests/{interest_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an Interest */
        get: operations["getInterest"];
        put?: never;
        post?: never;
        /** Delete an Interest */
        delete: operations["deleteInterest"];
        options?: never;
        head?: never;
        /** Update an Interest */
        patch: operations["patchInterest"];
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all asynchronous Tasks
         * @description Show all asynchronous Task.
         */
        get: operations["listTasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show an asynchronous Task
         * @description Show an asynchronous Task.
         */
        get: operations["getTask"];
        put?: never;
        post?: never;
        /**
         * Delete an asynchronous Task
         * @description Delete an asynchronous Task.
         */
        delete: operations["deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all templates */
        get: operations["listTemplates"];
        put?: never;
        /** Create a template */
        post: operations["createTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a template */
        get: operations["getTemplate"];
        put?: never;
        post?: never;
        /** Delete a template */
        delete: operations["deleteTemplate"];
        options?: never;
        head?: never;
        /** Update a template */
        patch: operations["patchTemplate"];
        trace?: never;
    };
    "/templates/{template_id}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Render a template */
        get: operations["renderTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/lists/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show list report */
        get: operations["getListStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show campaign report */
        get: operations["getCampaignStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns/{campaign_id}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show campaign links report */
        get: operations["getCampaignLinksStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/accounts/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show my account report */
        get: operations["getSelfAccountStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show account report */
        get: operations["getAccountStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/workflows/{workflow_id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show action report */
        get: operations["getActionStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns-exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List campaigns reports exports */
        get: operations["listCampaignsReportsExports"];
        put?: never;
        /** Create a campaigns reports export */
        post: operations["createCampaignsReportsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns-exports/{export_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a campaigns reports export */
        get: operations["getCampaignsReportsExport"];
        put?: never;
        post?: never;
        /** Delete a campaigns report export */
        delete: operations["deleteCampaignsReportsExport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns-exports/{export_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a campaigns reports export */
        get: operations["downloadCampaignsReportsExport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suppressed-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all suppressed emails */
        get: operations["listSuppressedEmails"];
        put?: never;
        /** Add a suppressed email */
        post: operations["createSuppressedEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suppressed-emails/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a suppressed email */
        delete: operations["deleteSuppressedEmail"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/suppressed-emails-exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all Suppressed Emails Export
         * @description Show all Suppressed Emails Export.
         */
        get: operations["listSuppressedEmailsExport"];
        put?: never;
        /**
         * Create a Suppressed Emails Export
         * @description Create a Suppressed Emails Export to a CSV file.
         */
        post: operations["createSuppressedEmailsExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/suppressed-emails-exports/{export_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a Suppressed Emails Export
         * @description Show a Suppressed Emails Export.
         */
        get: operations["getSuppressedEmailsExport"];
        put?: never;
        post?: never;
        /**
         * Delete a Suppressed Emails Export
         * @description Delete a Suppressed Emails Export.
         */
        delete: operations["deleteSuppressedEmailsExport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/suppressed-emails-exports/{export_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a suppressed emails export
         * @description Returns the URL to download the exported CSV file.
         */
        get: operations["suppressedEmailsExportDownload"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Refresh a token
         * @deprecated
         * @description This endpoint is deprecated.  Please see the "Create or Refresh a Token" endpoint instead.
         */
        put: operations["refreshToken"];
        /**
         * Create or Refresh a token
         * @description **Authentication**
         *
         *     The API uses OAuth 2.0 Resource Owner Password Credentials Grant to authenticate
         *     users. This grant type is suitable for clients that have direct access to the
         *     user's credentials. The client sends the user's credentials to the server and
         *     receives an access token and a refresh token in return.
         *
         *     _Access and Refresh tokens are sensitive data and must be stored securely._
         *
         *     **Creating a token**
         *
         *     When the `grant_type` is set to `password`, the endpoint will authenticate the
         *     user using the provided username and password. If the user is authenticated
         *     successfully, the endpoint will generate an access token and a refresh token.
         *
         *     The access token is used to authenticate requests to other endpoints, while the
         *     refresh token is used to obtain a new access token when the current one expires.
         *
         *     The refresh token is a long-lived token that can be used to obtain a new access
         *     token when the current one expires. Refresh tokens cannot be used as access
         *     tokens.
         *
         *     **Multi-Factor Authentication**
         *
         *     If the user account is protected by multi-factor authentication (MFA), the
         *     endpoint will respond with a `401 Unauthorized` status and include a `challenge`
         *     field in the response body. This field contains a unique identifier. To complete
         *     the token creation, the client must complete the challenge by sending a request
         *     to the `/token/challenge` endpoint.
         *
         *     **Refreshing a token**
         *
         *     When the `grant_type` is set to `refresh_token`, the endpoint will refresh the
         *     access token using the provided refresh token.
         */
        post: operations["createToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token/challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete a Multi-Factor Authentication challenge
         * @description This endpoint serves to complete the MFA (multi-factor authentication)
         *     challenge and return an access and refresh token pair. The complete login
         *     sequence for an MFA-enabled user is as follows:
         *
         *     1. The client sends a POST request to `/token` with the `username` and
         *     `password` in the request body.
         *     2. The API returns a `challenge` in the response body.
         *     3. The client sends a POST request to `/token/challenge` with the
         *     `challenge` and `code` in the request body.
         *     4. The API returns an `access_token` and `refresh_token` in the response
         *     body.
         *
         *     **Access and Refresh tokens should be treated as sensitive data and should
         *     be stored securely.**
         */
        post: operations["createTokenFromChallenge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show my user details */
        get: operations["getSelfUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/forgot-my-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Forgot my password
         * @description Sends an email containing a reset password token.
         */
        post: operations["forgotMyPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset my password
         * @description Sends an email containing a reset password token.
         */
        post: operations["resetSelfPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset a user password
         * @description Sends an email containing a reset password token.
         */
        post: operations["resetUserPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/reset-password-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password confirmation
         * @description Change a user password if the reset password token is valid for that user.
         */
        post: operations["resetPasswordConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all users in my account */
        get: operations["listUsers"];
        put?: never;
        /** Create a user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a user details */
        get: operations["getUser"];
        put?: never;
        post?: never;
        /** Delete a user */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        /** Update a user */
        patch: operations["patchUser"];
        trace?: never;
    };
    "/users/{user_id}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suspend a user */
        post: operations["suspendUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/unsuspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unsuspend a user */
        post: operations["unsuspendUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm a user */
        post: operations["confirmUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/resend-verification-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend the user verification email */
        post: operations["resendUserVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/mfa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active MFA methods */
        get: operations["listMfa"];
        put?: never;
        /** Attach an MFA method */
        post: operations["createMfa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/mfa/{mfa_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate an MFA method */
        post: operations["activateMfa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/mfa-recovery-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MFA recovery codes */
        get: operations["getMfaRecoveryCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/mfa-portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the MFA portal URL */
        get: operations["getMfaPortal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/self/mfa/{mfa_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove an MFA method */
        delete: operations["deleteMfa"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show all sub-accounts */
        get: operations["listAccounts"];
        put?: never;
        /** Create a sub-account */
        post: operations["createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show sub-account details */
        get: operations["getAccount"];
        put?: never;
        post?: never;
        /** Delete a sub-account */
        delete: operations["deleteAccount"];
        options?: never;
        head?: never;
        /** Update a sub-account */
        patch: operations["patchAccount"];
        trace?: never;
    };
    "/accounts/{account_id}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suspend a sub-account */
        post: operations["suspendAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}/unsuspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unsuspend a sub-account */
        post: operations["unsuspendAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm sub-account creation */
        post: operations["confirmAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/resend-verification-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend the account verification email */
        post: operations["resendAccountVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{account_id}/convert-to-organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Convert an account to an Organization */
        post: operations["convertAccountToOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all workflows
         * @deprecated
         */
        get: operations["listWorkflows"];
        put?: never;
        /**
         * Create a workflow
         * @deprecated
         */
        post: operations["createWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a workflow
         * @deprecated
         */
        get: operations["getWorkflow"];
        put?: never;
        post?: never;
        /**
         * Delete a workflow
         * @deprecated
         */
        delete: operations["deleteWorkflow"];
        options?: never;
        head?: never;
        /**
         * Update a workflow
         * @deprecated
         */
        patch: operations["patchWorkflow"];
        trace?: never;
    };
    "/workflows/{workflow_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a workflow
         * @deprecated
         */
        post: operations["activateWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a workflow
         * @deprecated
         */
        post: operations["deactivateWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lock a workflow
         * @deprecated
         */
        post: operations["lockWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflow_id}/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlock a workflow
         * @deprecated
         */
        post: operations["unlockWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show all workflow blueprints
         * @deprecated
         */
        get: operations["listWorkflowBlueprints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-blueprints/{blueprint_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a workflow blueprint
         * @deprecated
         */
        get: operations["getWorkflowBlueprint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-blueprints/{blueprint_id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show workflow blueprint actions
         * @deprecated
         */
        get: operations["listWorkflowBlueprintActions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-blueprints/{blueprint_id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show a workflow blueprint action
         * @deprecated
         */
        get: operations["getWorkflowBlueprintAction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/default/system-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show system emails configuration
         * @description Show system emails configuration
         */
        get: operations["showSystemEmails"];
        /**
         * Set system emails configuration
         * @description Set system emails configuration
         */
        put: operations["setSystemEmails"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update system emails configuration
         * @description Partially update system emails configuration
         */
        patch: operations["patchSystemEmails"];
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all webhooks */
        get: operations["listWebhooks"];
        put?: never;
        /** Create a webhook */
        post: operations["createWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhook_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Archive a webhook */
        post: operations["archiveWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhook_id}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unarchive a webhook */
        post: operations["unarchiveWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a webhook */
        get: operations["getWebhook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch a webhook */
        patch: operations["patchWebhook"];
        trace?: never;
    };
    "/tags/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show a Contact Tag */
        get: operations["showTag"];
        put?: never;
        post?: never;
        /** Delete a Contact Tag */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        /** Edit a Contact Tag */
        patch: operations["patchTag"];
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Contact Tags */
        get: operations["listTags"];
        put?: never;
        /** Create a Contact Tag */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * APIVersion
         * @description An enumeration.
         * @enum {string}
         */
        APIVersion: "v1" | "v2";
        /** AcceptListPolicyResponse */
        AcceptListPolicyResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default list
             */
            object: string;
            /**
             * policy_accepted
             * @default true
             */
            policy_accepted: boolean;
        };
        /** AccountFullResponse */
        AccountFullResponse: {
            /** id */
            id: string;
            /** lineage */
            lineage: string;
            /** status */
            status: components["schemas"]["AccountStatus"];
            /** name */
            name?: string;
            /** address */
            address: components["schemas"]["AddressResponse"];
            /** account_owner */
            account_owner: components["schemas"]["AccountOwnerResponse"];
            /** fax */
            fax?: string;
            /** phone */
            phone?: string;
            /** website */
            website?: string;
            /** logo */
            logo: string;
            /** usage_limits */
            usage_limits: components["schemas"]["UsageLimitsResponse"];
            /** last_activity_on */
            last_activity_on: number;
            /** created_on */
            created_on: number;
            /** partner */
            partner: boolean;
            /** organization */
            organization: boolean;
            /** stripe_customer_id */
            stripe_customer_id?: string;
            /** overrides */
            overrides: components["schemas"]["AccountOverrides"];
            /** metadata */
            metadata?: Record<string, never>;
        };
        /** AccountOverrides */
        AccountOverrides: {
            /** bypass_recaptcha */
            bypass_recaptcha: boolean;
            /** inject_address */
            inject_address: boolean;
            /** inject_unsubscribe_link */
            inject_unsubscribe_link: boolean;
        };
        /** AccountOwner */
        AccountOwner: {
            /** user_id */
            user_id: number;
        };
        /** AccountOwnerResponse */
        AccountOwnerResponse: {
            /** user_id */
            user_id?: string;
        };
        /** AccountOwnerUser */
        AccountOwnerUser: {
            /** first_name */
            first_name: string;
            /** last_name */
            last_name: string;
            /** title */
            title?: string;
            /** office_phone */
            office_phone?: string;
            /** mobile_phone */
            mobile_phone?: string;
            /** language */
            language?: components["schemas"]["Languages"];
            /**
             * timezone
             * @description Based on tz database
             */
            timezone?: string;
            /** password */
            password?: string;
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * password_strength_requirement
             * @default VERY_WEAK
             */
            password_strength_requirement: components["schemas"]["PasswordStrengthRequirement"];
        };
        /** AccountResponse */
        AccountResponse: {
            /** data */
            data: components["schemas"]["AccountFullResponse"];
        };
        /** AccountStatResponse */
        AccountStatResponse: {
            /** active_contacts */
            active_contacts: number;
            /** sent_emails */
            sent_emails: number;
            /** sent_campaign_emails */
            sent_campaign_emails: number;
            /** sent_action_emails */
            sent_action_emails: number;
            /** sent_email_emails */
            sent_email_emails: number;
            /** open_rate */
            open_rate: number;
            /** bounce_rate */
            bounce_rate: number;
            /** click_rate */
            click_rate: number;
            /** spam_rate */
            spam_rate: number;
            /** unsubscribe_rate */
            unsubscribe_rate: number;
            /** emails_usage */
            emails_usage: number;
            /** contacts_usage */
            contacts_usage: number;
            /** bounces_hard */
            bounces_hard: number;
            /** bounce_hard_rate */
            bounce_hard_rate: number;
            /** spams */
            spams: number;
            /** current_lists */
            current_lists: number;
            /** email_api */
            email_api?: components["schemas"]["EmailAPIStatResponse"];
        };
        /** AccountStatsResponse */
        AccountStatsResponse: {
            /** data */
            data: components["schemas"]["AccountStatResponse"];
        };
        /**
         * AccountStatus
         * @description An enumeration.
         * @enum {string}
         */
        AccountStatus: "trial" | "active" | "suspended" | "suspended_by_partner" | "deleted" | "incomplete" | "pending";
        /** AccountSummaryResponse */
        AccountSummaryResponse: {
            /** id */
            id: string;
            /** lineage */
            lineage: string;
            /** status */
            status: components["schemas"]["AccountStatus"];
            /** partner */
            partner: boolean;
            /** name */
            name?: string;
            /** account_owner */
            account_owner: components["schemas"]["AccountOwnerResponse"];
            /** usage_limits */
            usage_limits: components["schemas"]["UsageLimitsResponse"];
            /** created_on */
            created_on: number;
            /** stripe_customer_id */
            stripe_customer_id?: string;
            /** expires_on */
            expires_on?: number;
        };
        /** AccountsResponse */
        AccountsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["AccountSummaryResponse"][];
        };
        /** Action */
        Action: {
            /** name */
            name: string;
            /** parent_id */
            parent_id?: string;
            /** condition */
            condition: components["schemas"]["ActionCondition"];
            /** delay */
            delay: number;
            /** type */
            type: components["schemas"]["ActionType"];
            /** email_settings */
            email_settings?: components["schemas"]["ActionEmailSettings"];
        };
        /** ActionBlueprint */
        ActionBlueprint: {
            /** id */
            id: string;
            /** created_on */
            created_on?: number;
            /** updated_on */
            updated_on?: number;
            /** name */
            name: string;
            /** parent_id */
            parent_id?: string;
            /** condition */
            condition: components["schemas"]["ActionCondition"];
            /** delay */
            delay: number;
            /** type */
            type: components["schemas"]["ActionType"];
            /** email_settings */
            email_settings?: components["schemas"]["ActionEmailBlueprintSettings"];
        };
        /**
         * condition
         * @description An enumeration.
         * @enum {string}
         */
        ActionCondition: "opened" | "not_opened" | "clicked" | "not_clicked" | "none";
        /** ActionContent */
        ActionContent: {
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
            /**
             * type
             * @default html
             */
            type: components["schemas"]["ContentType"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
            /** template */
            template?: components["schemas"]["TemplateId"];
        };
        /** ActionDefaultEmailSettings */
        ActionDefaultEmailSettings: {
            /** sender */
            sender: components["schemas"]["Sender"];
        };
        /** ActionEmailBlueprintSettings */
        ActionEmailBlueprintSettings: {
            /**
             * tracking
             * @default {
             *       "opens": true,
             *       "clicks_html": true,
             *       "clicks_text": true
             *     }
             */
            tracking: components["schemas"]["ActionTracking"];
            /** content */
            content: components["schemas"]["ActionContent"];
        };
        /** ActionEmailSettings */
        ActionEmailSettings: {
            /**
             * tracking
             * @default {
             *       "opens": true,
             *       "clicks_html": true,
             *       "clicks_text": true
             *     }
             */
            tracking: components["schemas"]["ActionTracking"];
            /** content */
            content: components["schemas"]["ActionContent"];
            /** sender */
            sender: components["schemas"]["Sender"];
        };
        /** ActionLogResponse */
        ActionLogResponse: {
            /** id */
            id?: number;
            /** contact_id */
            contact_id: number;
            /** email */
            email?: string;
            /** type */
            type?: components["schemas"]["EventTypeResponse"];
            /** timestamp */
            timestamp?: number;
            /** occurrences */
            occurrences: number;
            /** user_agent */
            user_agent?: components["schemas"]["UserInfo"];
        };
        /** ActionLogsResponse */
        ActionLogsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ActionLogResponse"][];
        };
        /** ActionResponse */
        ActionResponse: {
            /** id */
            id: string;
            /** created_on */
            created_on?: number;
            /** updated_on */
            updated_on?: number;
            /** name */
            name: string;
            /** parent_id */
            parent_id?: string;
            /** condition */
            condition: components["schemas"]["ActionCondition"];
            /** delay */
            delay: number;
            /** type */
            type: components["schemas"]["ActionType"];
            /** email_settings */
            email_settings?: components["schemas"]["ActionEmailSettings"];
            /** thumbnail_url */
            thumbnail_url: string;
        };
        /** ActionStatResponse */
        ActionStatResponse: {
            /** bounces */
            bounces: number;
            /** bounces_address_changed */
            bounces_address_changed: number;
            /** bounces_challenge_response */
            bounces_challenge_response: number;
            /** bounces_dns_failure */
            bounces_dns_failure: number;
            /** bounces_full_mailbox */
            bounces_full_mailbox: number;
            /** bounces_hard */
            bounces_hard: number;
            /** bounces_mail_blocked */
            bounces_mail_blocked: number;
            /** bounces_soft */
            bounces_soft: number;
            /** bounces_transient */
            bounces_transient: number;
            /** unique_clicks */
            unique_clicks: number;
            /** forwards */
            forwards: number;
            /** implied_opens */
            implied_opens: number;
            /** unique_opens */
            unique_opens: number;
            /** unopens */
            unopens: number;
            /** clicks */
            clicks: number;
            /** opens */
            opens: number;
            /** spams */
            spams: number;
            /** spam_rate */
            spam_rate: number;
            /** unsubscribes */
            unsubscribes: number;
            /** sent_emails */
            sent_emails: number;
        };
        /** ActionStatsResponse */
        ActionStatsResponse: {
            /** data */
            data: components["schemas"]["ActionStatResponse"];
        };
        /** ActionSummaryResponse */
        ActionSummaryResponse: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** parent_id */
            parent_id?: string;
            /** condition */
            condition: components["schemas"]["ActionCondition"];
            /** delay */
            delay: number;
            /** type */
            type: components["schemas"]["ActionType"];
            /** created_on */
            created_on?: number;
            /** updated_on */
            updated_on?: number;
            /** thumbnail_url */
            thumbnail_url: string;
        };
        /** ActionTracking */
        ActionTracking: {
            /**
             * opens
             * @default true
             */
            opens: boolean;
            /**
             * clicks_html
             * @default true
             */
            clicks_html: boolean;
            /**
             * clicks_text
             * @default true
             */
            clicks_text: boolean;
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        ActionType: "email";
        /** ActionsResponse */
        ActionsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ActionSummaryResponse"][];
        };
        /** ActivateMFARequest */
        ActivateMFARequest: {
            /**
             * code
             * @description 6 digit code from this MFA method
             */
            code: string;
        };
        /** ActivateMFAResponse */
        ActivateMFAResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default mfa
             */
            object: string;
            /**
             * activated
             * @default true
             */
            activated: boolean;
        };
        /** ActivateWorkflowResponse */
        ActivateWorkflowResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default workflow
             */
            object: string;
            /**
             * activated
             * @default true
             */
            activated: boolean;
        };
        /** AddInterestsToContacts */
        AddInterestsToContacts: {
            /** interests */
            interests: string[];
            /** contact_ids */
            contact_ids?: number[];
            /** query */
            query?: string;
            /** fiql */
            fiql?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** AddInterestsToMultipleContactsResponse */
        AddInterestsToMultipleContactsResponse: {
            /**
             * object
             * @default interests
             */
            object: string;
            /**
             * added
             * @default true
             */
            added: boolean;
        };
        /** AdditionalEmailHeader */
        AdditionalEmailHeader: {
            /** name */
            name: string;
            /** value */
            value: string;
        };
        /** Address */
        Address: {
            /** address1 */
            address1: string;
            /** address2 */
            address2?: string;
            /** city */
            city?: string;
            /** country */
            country: string;
            /** province */
            province?: string;
            /** postal_code */
            postal_code?: string;
        };
        /** AddressResponse */
        AddressResponse: {
            /** address1 */
            address1?: string;
            /** address2 */
            address2?: string;
            /** city */
            city?: string;
            /** country */
            country?: string;
            /** province */
            province?: string;
            /** postal_code */
            postal_code?: string;
        };
        /** ArchiveCampaignResponse */
        ArchiveCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * archived
             * @default true
             */
            archived: boolean;
        };
        /** ArchiveListResponse */
        ArchiveListResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default list
             */
            object: string;
            /**
             * archived
             * @default true
             */
            archived: boolean;
        };
        /** ArchiveWebhookResponse */
        ArchiveWebhookResponse: {
            /** id */
            id: string;
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"];
            /**
             * object
             * @default Webhook
             */
            object: string;
            /**
             * archived
             * @default true
             */
            archived: boolean;
        };
        /** Attachment */
        Attachment: {
            /**
             * filename
             * @description File name
             */
            filename: string;
            /**
             * type
             * @description Content Type
             */
            type: components["schemas"]["AttachmentType"];
            /**
             * content
             * @description Base64-encoded attachment content
             */
            content: string;
        };
        /**
         * type
         * @description Content Type
         * @enum {string}
         */
        AttachmentType: "csv" | "doc" | "docx" | "calendar" | "jpeg" | "pdf" | "png" | "xls" | "xlsx";
        /** Audience */
        Audience: {
            /** list_id */
            list_id?: number;
            /** segment_id */
            segment_id?: number;
        };
        /** AudienceResponse */
        AudienceResponse: {
            /** list_id */
            list_id?: number;
            /** name */
            name?: string;
            /** segment_id */
            segment_id?: number;
        };
        /** AudienceSummaryResponse */
        AudienceSummaryResponse: {
            /** list_id */
            list_id?: number;
            /** segment_id */
            segment_id?: number;
        };
        /** BadRequestMessage */
        BadRequestMessage: {
            /** loc */
            loc?: string[];
            /** msg */
            msg: string;
            /**
             * type
             * @default bad_request
             */
            type: string;
        };
        /** Body_createToken */
        Body_createToken: {
            /**
             * grant_type
             * @default password
             */
            grant_type: components["schemas"]["PasswordGrantType"];
            /**
             * username
             * Format: email
             */
            username?: string;
            /** password */
            password?: string;
            /** account_id */
            account_id?: number;
            /**
             * scopes
             * @description A comma separated list of scopes.
             * @default user
             */
            scopes: string;
            /** expiration_seconds */
            expiration_seconds?: number;
            /** refresh_token */
            refresh_token?: string;
        };
        /** Body_refreshToken */
        Body_refreshToken: {
            /**
             * grant_type
             * @default refresh_token
             */
            grant_type: components["schemas"]["RefreshGrantType"];
            /** refresh_token */
            refresh_token: string;
        };
        /** BrowserInfo */
        BrowserInfo: {
            /** family */
            family?: string;
            /** version */
            version?: string;
        };
        /** CampaignBlueprintId */
        CampaignBlueprintId: {
            /** id */
            id: number;
        };
        /** CampaignBlueprintResponse */
        CampaignBlueprintResponse: {
            /** data */
            data: components["schemas"]["TemplateFullResponse"];
        };
        /** CampaignBlueprintSummaryResponse */
        CampaignBlueprintSummaryResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** description */
            description?: string;
            /** created_on */
            created_on: number;
            /** updated_on */
            updated_on: number;
            /** tags */
            tags?: string[];
            /**
             * thumbnail
             * @deprecated
             */
            thumbnail?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
        };
        /** CampaignBlueprintsResponse */
        CampaignBlueprintsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignBlueprintSummaryResponse"][];
        };
        /** CampaignContent */
        CampaignContent: {
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
            /**
             * type
             * @default html
             */
            type: components["schemas"]["ContentType"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
            /** template */
            template?: components["schemas"]["TemplateId"];
            /** blueprint */
            blueprint?: components["schemas"]["CampaignBlueprintId"];
            /** default_unsubscribe_link */
            default_unsubscribe_link?: boolean;
        };
        /** CampaignContentResponse */
        CampaignContentResponse: {
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
            /** type */
            type?: components["schemas"]["ContentTypeResponse"];
            /** hash */
            hash?: string;
            /** last_updated_on */
            last_updated_on?: number;
            /** encoding */
            encoding?: components["schemas"]["EncodingResponse"];
            /** default_unsubscribe_link */
            default_unsubscribe_link?: boolean;
            /** social_bar */
            social_bar?: boolean;
            /** footer */
            footer?: string;
        };
        /** CampaignFullResponse */
        CampaignFullResponse: {
            /** id */
            id: number;
            /** name */
            name?: string;
            /** audience */
            audience?: components["schemas"]["AudienceResponse"];
            /** type */
            type?: components["schemas"]["CampaignType"];
            /** tracking */
            tracking?: components["schemas"]["TrackingResponse"];
            /** created_on */
            created_on?: number;
            /** scheduled_for */
            scheduled_for?: number;
            /** scheduled_on */
            scheduled_on?: number;
            /** delivery_finished_on */
            delivery_finished_on?: number;
            /** sender */
            sender?: components["schemas"]["ListSenderResponse"];
            /** reply_to_email */
            reply_to_email?: string;
            /** content */
            content?: components["schemas"]["CampaignContentResponse"];
            /** next_building_step */
            next_building_step?: string;
            /** status */
            status?: components["schemas"]["CampaignStatus"];
            /**
             * suspended
             * @description Whether the campaign is suspended/paused
             */
            suspended?: boolean;
            /**
             * over_limit
             * @description Whether the campaign is over the limits of your plan
             */
            over_limit?: boolean;
            /**
             * under_review
             * @description Whether the campaign is under review and on hold
             */
            under_review?: boolean;
            /** heatmap_link */
            heatmap_link?: string;
            /** web_email_link */
            web_email_link?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
            /** updated_on */
            updated_on?: number;
        };
        /** CampaignLinkStatsResponse */
        CampaignLinkStatsResponse: {
            /** id */
            id: number;
            /** link */
            link: string;
            /** unique */
            unique: number;
            /** total */
            total: number;
            /** unique_rate */
            unique_rate: number;
            /** total_rate */
            total_rate: number;
        };
        /** CampaignLinksStatsResponse */
        CampaignLinksStatsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignLinkStatsResponse"][];
        };
        /** CampaignLogExportFullResponse */
        CampaignLogExportFullResponse: {
            /** id */
            id: string;
            /** campaign_id */
            campaign_id: number;
            /** status */
            status: components["schemas"]["CampaignLogExportStatus"];
            /** description */
            description?: string;
            /** requested_by */
            requested_by: components["schemas"]["CampaignLogExportRequestedBy"];
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /** progress */
            progress: number;
        };
        /** CampaignLogExportRequestedBy */
        CampaignLogExportRequestedBy: {
            /** id */
            id: number;
            /** email */
            email: string;
        };
        /**
         * CampaignLogExportStatus
         * @description An enumeration.
         * @enum {string}
         */
        CampaignLogExportStatus: "pending" | "ready" | "deleted" | "failed";
        /** CampaignLogExportsResponse */
        CampaignLogExportsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignLogExportFullResponse"][];
        };
        /** CampaignLogResponse */
        CampaignLogResponse: {
            /** id */
            id: number;
            /** contact_id */
            contact_id: number;
            /** email */
            email?: string;
            /** type */
            type?: components["schemas"]["EventTypeResponse"];
            /** timestamp */
            timestamp?: number;
            /** occurrences */
            occurrences?: number;
            /** clickthru_url */
            clickthru_url?: string;
            /** user_agent */
            user_agent?: components["schemas"]["UserInfo"];
        };
        /** CampaignLogsResponse */
        CampaignLogsResponse: {
            /** pagination */
            pagination: components["schemas"]["PaginationWithCursor"];
            /** data */
            data: components["schemas"]["CampaignLogResponse"][];
        };
        /** CampaignResponse */
        CampaignResponse: {
            /** data */
            data: components["schemas"]["CampaignFullResponse"];
        };
        /** CampaignRevision */
        CampaignRevision: {
            /** id */
            id: number;
            /** date */
            date: string;
        };
        /** CampaignRevisionsResponse */
        CampaignRevisionsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignRevision"][];
        };
        /** CampaignStatResponse */
        CampaignStatResponse: {
            /** active_emails */
            active_emails: number;
            /** bounces */
            bounces: number;
            /** bounce_rate */
            bounce_rate: number;
            /** bounces_address_changed */
            bounces_address_changed: number;
            /** bounces_challenge_response */
            bounces_challenge_response: number;
            /** bounces_dns_failure */
            bounces_dns_failure: number;
            /** bounces_full_mailbox */
            bounces_full_mailbox: number;
            /** bounces_hard */
            bounces_hard: number;
            /** bounces_mail_blocked */
            bounces_mail_blocked: number;
            /** bounces_soft */
            bounces_soft: number;
            /** bounces_transient */
            bounces_transient: number;
            /** clicks */
            clicks: number;
            /** click_rate */
            click_rate: number;
            /** clickthru_rate */
            clickthru_rate: number;
            /** forwards */
            forwards: number;
            /** implied_opens */
            implied_opens: number;
            /** opens */
            opens: number;
            /** open_rate */
            open_rate: number;
            /** spams */
            spams: number;
            /** unique_clicks */
            unique_clicks: number;
            /** unique_opens */
            unique_opens: number;
            /** unopens */
            unopens: number;
            /** unopen_rate */
            unopen_rate: number;
            /** unsubscribes */
            unsubscribes: number;
            /** unsubscribe_rate */
            unsubscribe_rate: number;
            /** spam_rate */
            spam_rate: number;
            /** sent_emails */
            sent_emails: number;
            /** sent_rate */
            sent_rate: number;
        };
        /** CampaignStatsResponse */
        CampaignStatsResponse: {
            /** data */
            data: components["schemas"]["CampaignStatResponse"];
        };
        /**
         * CampaignStatus
         * @description An enumeration.
         * @enum {string}
         */
        CampaignStatus: "active" | "delivering" | "delivered" | "archived" | "deleted" | "incomplete" | "scheduled";
        /** CampaignSummaryResponse */
        CampaignSummaryResponse: {
            /** id */
            id: number;
            /** name */
            name?: string;
            /** audience */
            audience?: components["schemas"]["AudienceSummaryResponse"];
            /** type */
            type?: components["schemas"]["CampaignType"];
            /** created_on */
            created_on?: number;
            /** scheduled_for */
            scheduled_for?: number;
            /** scheduled_on */
            scheduled_on?: number;
            /** sender */
            sender?: components["schemas"]["ListSenderResponse"];
            /** next_building_step */
            next_building_step?: string;
            /** status */
            status?: components["schemas"]["CampaignStatus"];
            /**
             * suspended
             * @description Whether the campaign is suspended/paused
             */
            suspended?: boolean;
            /**
             * over_limit
             * @description Whether the campaign is over the limits of your plan
             */
            over_limit?: boolean;
            /**
             * under_review
             * @description Whether the campaign is under review and on hold
             */
            under_review?: boolean;
            /** web_email_link */
            web_email_link?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
            /** updated_on */
            updated_on?: number;
        };
        /**
         * CampaignType
         * @description An enumeration.
         * @enum {string}
         */
        CampaignType: "standard" | "recurring" | "absplit";
        /** CampaignsReportsExportResponse */
        CampaignsReportsExportResponse: {
            /** id */
            id: string;
            /** status */
            status: components["schemas"]["TaskStatus"];
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /**
             * progress
             * @default 0
             */
            progress: number;
            /** requested_by */
            requested_by: components["schemas"]["RequestedByUser"];
            /**
             * type
             * @default campaignsreportsexport
             */
            type: components["schemas"]["TaskType"];
            /** description */
            description?: string;
            /** payload */
            payload: Record<string, never>;
        };
        /** CampaignsResponse */
        CampaignsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignSummaryResponse"][];
        };
        /** CancelCampaignResponse */
        CancelCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * cancelled
             * @default true
             */
            cancelled: boolean;
        };
        /** ChallengeResponse */
        ChallengeResponse: {
            /** challenge */
            challenge: string;
        };
        /** ChallengeResponseRequest */
        ChallengeResponseRequest: {
            /** challenge */
            challenge: string;
            /** code */
            code: string;
            /**
             * scopes
             * @default [
             *       "user"
             *     ]
             */
            scopes: components["schemas"]["Scope"][];
        };
        /** ChangePassword */
        ChangePassword: {
            /** current */
            current?: string;
            /** new */
            new: string;
            /**
             * password_strength_requirement
             * @default VERY_WEAK
             */
            password_strength_requirement: components["schemas"]["PasswordStrengthRequirement"];
        };
        /** ConfirmAccount */
        ConfirmAccount: {
            /** confirmation */
            confirmation: string;
        };
        /** ConfirmAccountResponse */
        ConfirmAccountResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * email
             * Format: email
             */
            email?: string;
            /** data */
            data?: components["schemas"]["AccountFullResponse"];
            /** metadata */
            metadata?: string;
            /**
             * confirmed
             * @default true
             */
            confirmed: boolean;
        };
        /** ConfirmSender */
        ConfirmSender: {
            /** confirmation_id */
            confirmation_id: string;
        };
        /** ConfirmSenderResponse */
        ConfirmSenderResponse: {
            /**
             * confirmed
             * @default true
             */
            confirmed: boolean;
            /**
             * object
             * @default sender
             */
            object: string;
            /** data */
            data: components["schemas"]["SenderFullResponse"];
        };
        /** ConfirmUserResponse */
        ConfirmUserResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * confirmed
             * @default true
             */
            confirmed: boolean;
            /** data */
            data: components["schemas"]["UserFullResponse"];
        };
        /** Contact */
        Contact: {
            /**
             * email
             * Format: email
             */
            email: string;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
        };
        /** ContactFullResponse */
        ContactFullResponse: {
            /** id */
            id: number;
            /** email */
            email: string;
            /** status */
            status: string;
            /** subscribed_on */
            subscribed_on: number;
            /** last_bounce_type */
            last_bounce_type: string;
            /** bounces_count */
            bounces_count: number;
            /** custom_attributes */
            custom_attributes: components["schemas"]["CustomAttributesDataResponse"][];
            /**
             * tags
             * @default []
             */
            tags: string[];
            /**
             * interests
             * @default []
             */
            interests: string[];
        };
        /** ContactResponse */
        ContactResponse: {
            /** data */
            data: components["schemas"]["ContactFullResponse"];
        };
        /**
         * import_to
         * @description An enumeration.
         * @enum {string}
         */
        ContactStatus: "active" | "unsubscribed" | "deleted";
        /** ContactsExportDeleteResponse */
        ContactsExportDeleteResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default contactsexport
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["ContactsExportFullResponse"];
        };
        /** ContactsExportFullResponse */
        ContactsExportFullResponse: {
            /** id */
            id: string;
            /** status */
            status: components["schemas"]["ContactsExportStatus"];
            /** description */
            description?: string;
            /** segment_id */
            segment_id?: number;
            /** filter */
            filter?: string;
            /** query */
            query?: string;
            /** fiql */
            fiql?: string;
            /** json */
            json?: Record<string, never>;
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /** progress */
            progress: number;
        };
        /** ContactsExportResponse */
        ContactsExportResponse: {
            /** data */
            data: components["schemas"]["ContactsExportFullResponse"];
        };
        /**
         * ContactsExportStatus
         * @description An enumeration.
         * @enum {string}
         */
        ContactsExportStatus: "pending" | "ready" | "deleted" | "failed";
        /** ContactsExportsResponse */
        ContactsExportsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ContactsExportFullResponse"][];
        };
        /** ContactsResponse */
        ContactsResponse: {
            /** pagination */
            pagination: components["schemas"]["PaginationWithCursor"];
            /** data */
            data: components["schemas"]["ContactFullResponse"][];
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        ContentType: "custom" | "html" | "bee";
        /**
         * ContentTypeResponse
         * @description An enumeration.
         * @enum {string}
         */
        ContentTypeResponse: "html" | "bee" | "custom";
        /** ConvertAccount */
        ConvertAccount: {
            /**
             * migrate_owner
             * @description Migrate the account owner from the original account to the Organization.
             * @default true
             */
            migrate_owner: boolean;
        };
        /** CreateAccount */
        CreateAccount: {
            /** name */
            name: string;
            /** address */
            address?: components["schemas"]["Address"];
            /** account_owner */
            account_owner?: components["schemas"]["AccountOwnerUser"];
            /** fax */
            fax?: string;
            /** phone */
            phone?: string;
            /**
             * website
             * Format: uri
             */
            website?: string;
            /**
             * usage_limits
             * @default {}
             */
            usage_limits: components["schemas"]["UsageLimits"];
            /**
             * domains
             * @default {}
             */
            domains: components["schemas"]["Domains"];
            /**
             * trial
             * @default false
             */
            trial: boolean;
            /**
             * partner
             * @default false
             */
            partner: boolean;
        };
        /** CreateAccountResponse */
        CreateAccountResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * email
             * Format: email
             */
            email?: string;
            /** data */
            data?: components["schemas"]["AccountFullResponse"];
            /** metadata */
            metadata?: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /**
             * warnings
             * @default []
             */
            warnings: Record<string, never>[];
        };
        /** CreateActionResponse */
        CreateActionResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default action
             */
            object: string;
            /** data */
            data: components["schemas"]["ActionResponse"];
            /**
             * created
             * @default true
             */
            created: boolean;
        };
        /** CreateAttributeResponse */
        CreateAttributeResponse: {
            /** name */
            name: string;
            /**
             * object
             * @default attribute
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["CustomAttributeFullResponse"];
        };
        /** CreateCampaign */
        CreateCampaign: {
            /** name */
            name: string;
            /**
             * audience
             * @default {}
             */
            audience: components["schemas"]["Audience"];
            /**
             * tracking
             * @default {
             *       "opens": true,
             *       "clicks_html": true,
             *       "clicks_text": true
             *     }
             */
            tracking: components["schemas"]["Tracking"];
            /** sender */
            sender?: components["schemas"]["SenderAndName"];
            /**
             * reply_to_email
             * Format: email
             * @description Specify a different reply-to email address than the sender
             */
            reply_to_email?: string;
            /**
             * content
             * @default {
             *       "type": "html"
             *     }
             */
            content: components["schemas"]["CampaignContent"];
        };
        /** CreateCampaignLogExportRequest */
        CreateCampaignLogExportRequest: {
            /** description */
            description?: string;
            /**
             * filter
             * @description Valid Terms:
             *       - `additional_info`
             *       - `link_id`
             *       - `contact_id`
             *       - `email`
             *       - `uniques`
             *       - `group_by_contact`
             *       - `log_id`
             *       - `totals`
             *       - `type`
             *
             *     Valid Operators:
             *       - `==`
             *
             *     Query separator:
             *       - `;`
             */
            filter?: string;
        };
        /** CreateCampaignLogExportResponse */
        CreateCampaignLogExportResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default task
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["CampaignLogExportFullResponse"];
        };
        /** CreateCampaignReportExport */
        CreateCampaignReportExport: {
            /** description */
            description?: string;
        };
        /** CreateCampaignResponse */
        CreateCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["CampaignFullResponse"];
        };
        /** CreateCampaignsReportsExportResponse */
        CreateCampaignsReportsExportResponse: {
            /** data */
            data: components["schemas"]["CampaignsReportsExportResponse"];
        };
        /** CreateContactResponse */
        CreateContactResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default contact
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data?: components["schemas"]["ContactFullResponse"];
        };
        /** CreateContactsExportResponse */
        CreateContactsExportResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default task
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["ContactsExportFullResponse"];
        };
        /** CreateCustomAttribute */
        CreateCustomAttribute: {
            /**
             * name
             * @description Cannot be one of the reserved terms: id, email, status, registered, bounce_type, bounce_count, tags, _tags
             */
            name: string;
            /** type */
            type: components["schemas"]["CustomAttributeType"];
        };
        /** CreateDkim */
        CreateDkim: {
            /** selector */
            selector?: string;
            /** domain */
            domain: string;
        };
        /** CreateDkimResponse */
        CreateDkimResponse: {
            /**
             * object
             * @default dkim
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["DkimKeySummaryResponse"];
        };
        /** CreateForm */
        CreateForm: {
            /** name */
            name: string;
            /**
             * status
             * @default active
             */
            status: components["schemas"]["FormStatus"];
            /** content */
            content: components["schemas"]["FormContent"];
            /**
             * redirections
             * @default {}
             */
            redirections: components["schemas"]["FormRedirections"];
            /** list_id */
            list_id: number;
            /** language */
            language: components["schemas"]["Languages"];
            /**
             * double_opt_in
             * @default true
             */
            double_opt_in: boolean;
        };
        /** CreateFormResponse */
        CreateFormResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default form
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["FormFullResponse"];
        };
        /** CreateListLogsExportRequest */
        CreateListLogsExportRequest: {
            /** description */
            description?: string;
            /**
             * filter
             * @description Valid Terms:
             *       - `additional_info`
             *       - `contact_id`
             *       - `email`
             *       - `uniques`
             *       - `group_by_contact`
             *       - `track_id`
             *       - `log_id`
             *       - `start_id`
             *       - `end_id`
             *       - `totals`
             *       - `type`
             *
             *     Valid Operators:
             *       - `==`
             *
             *     Query separator:
             *       - `;`
             */
            filter?: string;
        };
        /** CreateListLogsExportResponse */
        CreateListLogsExportResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default task
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["ListLogsExportFullResponse"];
        };
        /** CreateListResponse */
        CreateListResponse: {
            /** id */
            id: number;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["ListFullResponse"];
        };
        /** CreateMFARequest */
        CreateMFARequest: {
            /** type */
            type: components["schemas"]["MFAType"];
            /** description */
            description?: string;
        };
        /** CreateMFAResponse */
        CreateMFAResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default mfa
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["NewTOTPMFAResponse"];
        };
        /** CreateSegmentResponse */
        CreateSegmentResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default segment
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["SegmentFullResponse"];
        };
        /** CreateSender */
        CreateSender: {
            /** name */
            name: string;
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * language
             * @default en_US
             */
            language: components["schemas"]["Languages"];
        };
        /** CreateSenderResponse */
        CreateSenderResponse: {
            /** id */
            id: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /**
             * object
             * @default sender
             */
            object: string;
            /** data */
            data: components["schemas"]["SenderFullResponse"];
        };
        /** CreateSubscriptionFormEndpointRequest */
        CreateSubscriptionFormEndpointRequest: {
            /**
             * domain
             * @description domain name hosting the form
             */
            domain?: string;
            /**
             * name
             * @description Name of the form
             */
            name?: string;
            /**
             * double_opt_in
             * @description Whether to use double opt in
             * @default true
             */
            double_opt_in: boolean;
            /**
             * secret
             * @description Google reCaptcha secret key
             */
            secret?: string;
            /**
             * post_redirect_url
             * @description Instead of the usual API reply, redirect to this URL when submitting the form.
             */
            post_redirect_url?: string;
            /**
             * double_opt_in_redirect_url
             * @description Redirect to this URL after the double opt in callback.
             */
            double_opt_in_redirect_url?: string;
            /**
             * async_processing
             * @description Whether to process the form submission asynchronously.
             * @default true
             */
            async_processing: boolean;
        };
        /** CreateSubscriptionFormEndpointResponse */
        CreateSubscriptionFormEndpointResponse: {
            /**
             * object
             * @default subscription_form_endpoint
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /** CreateSuppressedEmailResponse */
        CreateSuppressedEmailResponse: {
            /** email */
            email: string;
            /**
             * created
             * @default true
             */
            created: boolean;
        };
        /** CreateSuppressedEmailsExportResponse */
        CreateSuppressedEmailsExportResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default task
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["SuppressedEmailsExportResponse"];
        };
        /** CreateTag */
        CreateTag: {
            /** tag */
            tag: string;
        };
        /** CreateTagResponse */
        CreateTagResponse: {
            /** tag */
            tag: string;
            /**
             * object
             * @default tag
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data?: components["schemas"]["TagFullResponse"];
        };
        /** CreateTransactionalEmailFromTemplate */
        CreateTransactionalEmailFromTemplate: {
            /** subject */
            subject: string;
            /** template_id */
            template_id: number;
        };
        /** CreateTransactionalEmailTemplate */
        CreateTransactionalEmailTemplate: {
            /** name */
            name: string;
            /** sender */
            sender: components["schemas"]["Sender"];
            /**
             * reply_to
             * Format: email
             */
            reply_to?: string;
            /** cc */
            cc?: string[];
            /** content */
            content: components["schemas"]["CreateTransactionalEmailTemplateContent"] | components["schemas"]["CreateTransactionalEmailFromTemplate"];
            /** tracking */
            tracking?: components["schemas"]["TransactionalEmailTemplateTracking"];
        };
        /** CreateTransactionalEmailTemplateContent */
        CreateTransactionalEmailTemplateContent: {
            /** type */
            type: components["schemas"]["ContentType"];
            /** subject */
            subject: string;
            /** json */
            json?: Record<string, never>;
            /** html */
            html?: string;
        };
        /** CreateTransactionalEmailTemplateResponse */
        CreateTransactionalEmailTemplateResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default transactional-email-template
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["TransactionalEmailTemplateFullResponse"];
        };
        /** CreateUserResponse */
        CreateUserResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
            /** data */
            data: components["schemas"]["UserFullResponse"];
        };
        /** CreateWebhook */
        CreateWebhook: {
            /** event */
            event: components["schemas"]["EventType"];
            /**
             * url
             * Format: uri
             */
            url: string;
            /**
             * rate_limit
             * @default 50
             */
            rate_limit: number;
            /**
             * rate_limit_period
             * @default second
             */
            rate_limit_period: components["schemas"]["RateLimitPeriod"];
        };
        /** CreateWebhookResponse */
        CreateWebhookResponse: {
            /** id */
            id: string;
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"];
        };
        /** CreateWorkflowResponse */
        CreateWorkflowResponse: {
            /** data */
            data: components["schemas"]["WorkflowResponse"];
            /** id */
            id: string;
            /**
             * object
             * @default workflow
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
        };
        /** Cursor */
        Cursor: {
            /** previous */
            previous?: string;
            /** next */
            next?: string;
        };
        /** CustomAttribute */
        CustomAttribute: {
            /** name */
            name: string;
            /** value */
            value?: string;
        };
        /**
         * CustomAttributeFullResponse
         * @description One List
         */
        CustomAttributeFullResponse: {
            /** name */
            name?: string;
            /** type */
            type?: components["schemas"]["CustomAttributeType"];
        };
        /** CustomAttributeResp */
        CustomAttributeResp: {
            /** name */
            name: string;
            /** value */
            value?: string;
        };
        /** CustomAttributeResponse */
        CustomAttributeResponse: {
            /** data */
            data: components["schemas"]["CustomAttributeFullResponse"];
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        CustomAttributeType: "text" | "mediumtext" | "integer" | "timestamp" | "datetime";
        /** CustomAttributesDataResponse */
        CustomAttributesDataResponse: {
            /** name */
            name: string;
            /** value */
            value: string;
        };
        /** CustomAttributesResponse */
        CustomAttributesResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CustomAttributeFullResponse"][];
        };
        /** DeactivateWorkflowResponse */
        DeactivateWorkflowResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default workflow
             */
            object: string;
            /**
             * deactivated
             * @default true
             */
            deactivated: boolean;
        };
        /** DeleteAccountResponse */
        DeleteAccountResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteActionResponse */
        DeleteActionResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default action
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["ActionResponse"];
        };
        /** DeleteCampaignResponse */
        DeleteCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteCampaignsReportsExportResponse */
        DeleteCampaignsReportsExportResponse: {
            /** data */
            data: components["schemas"]["CampaignsReportsExportResponse"];
        };
        /** DeleteContactResponse */
        DeleteContactResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default contact
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteCustomAttributeResponse */
        DeleteCustomAttributeResponse: {
            /** name */
            name: string;
            /**
             * object
             * @default attribute
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteDkimKeyResponse */
        DeleteDkimKeyResponse: {
            /**
             * object
             * @default dkim
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["DkimKeySummaryResponse"];
        };
        /** DeleteFormResponse */
        DeleteFormResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default form
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteListResponse */
        DeleteListResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default list
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteLogoResponse */
        DeleteLogoResponse: {
            /**
             * object
             * @default logo
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteMFAResponse */
        DeleteMFAResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default mfa
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteSegmentResponse */
        DeleteSegmentResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default segment
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteSenderResponse */
        DeleteSenderResponse: {
            /** id */
            id: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /**
             * object
             * @default sender
             */
            object: string;
        };
        /** DeleteSubscriptionFormEndpointResponse */
        DeleteSubscriptionFormEndpointResponse: {
            /**
             * object
             * @default subscription_form_endpoint
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /** DeleteSuppressedEmailResponse */
        DeleteSuppressedEmailResponse: {
            /** email */
            email: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteSuppressedEmailsExportResponse */
        DeleteSuppressedEmailsExportResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default task
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["SuppressedEmailsExportResponse"];
        };
        /** DeleteTagResponse */
        DeleteTagResponse: {
            /** tag */
            tag: string;
            /**
             * object
             * @default tag
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteTemplateResponse */
        DeleteTemplateResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default template
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteTransactionalEmailTemplateResponse */
        DeleteTransactionalEmailTemplateResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default transactional-email-template
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
            /** data */
            data: components["schemas"]["TransactionalEmailTemplateFullResponse"];
        };
        /** DeleteUserResponse */
        DeleteUserResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** DeleteWorkflowResponse */
        DeleteWorkflowResponse: {
            /** data */
            data: components["schemas"]["WorkflowResponse"];
            /** id */
            id: string;
            /**
             * object
             * @default workflow
             */
            object: string;
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /**
         * DeviceFamilyEnum
         * @description An enumeration.
         * @enum {string}
         */
        DeviceFamilyEnum: "pc" | "mobile" | "tablet";
        /** DeviceInfo */
        DeviceInfo: {
            /** family */
            family?: components["schemas"]["DeviceFamilyEnum"];
            /** brand */
            brand?: string;
            /** model */
            model?: string;
        };
        /** DisableSubscriptionFormEndpointResponse */
        DisableSubscriptionFormEndpointResponse: {
            /**
             * object
             * @default subscription_form_endpoint
             */
            object: string;
            /**
             * enabled
             * @default false
             */
            enabled: boolean;
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /** DkimKeyFullResponse */
        DkimKeyFullResponse: {
            /** id */
            id: number;
            /** status */
            status?: string;
            /** selector */
            selector: string;
            /** domain */
            domain: string;
            /** public_key */
            public_key: string;
            /** account_default */
            account_default: boolean;
        };
        /** DkimKeyResponse */
        DkimKeyResponse: {
            /** data */
            data: components["schemas"]["DkimKeyFullResponse"];
        };
        /** DkimKeySummaryResponse */
        DkimKeySummaryResponse: {
            /** id */
            id: number;
            /** status */
            status?: string;
            /** selector */
            selector: string;
            /** domain */
            domain: string;
            /** public_key */
            public_key: string;
        };
        /** DkimKeysResponse */
        DkimKeysResponse: {
            /** data */
            data: components["schemas"]["DkimKeyFullResponse"][];
        };
        /** DomainInstructionResponse */
        DomainInstructionResponse: {
            /** entry */
            entry: string;
            /** valid */
            valid: boolean;
        };
        /** Domains */
        Domains: {
            /** bounce */
            bounce?: string;
            /**
             * tracking
             * Format: uri
             */
            tracking?: string;
            /**
             * forward
             * Format: uri
             */
            forward?: string;
        };
        /** DomainsFullResponse */
        DomainsFullResponse: {
            /** auth */
            auth: string;
            /** bounce */
            bounce: string;
            /** dkim */
            dkim: string;
            /** tracking */
            tracking: string;
        };
        /** DomainsInstructionResponse */
        DomainsInstructionResponse: {
            /** bounce */
            bounce: components["schemas"]["DomainInstructionResponse"][];
            /** tracking */
            tracking: components["schemas"]["DomainInstructionResponse"][];
        };
        /** DomainsResponse */
        DomainsResponse: {
            /** data */
            data: components["schemas"]["DomainsFullResponse"];
        };
        /**
         * DoubleOptIn
         * @description Default: 'false'
         *
         *     Send a double opt-in/confirmation email
         *       - __new__ : send only if the email is new to the list
         *       - __not_active__ : send only if the contact is not already active
         *       - __true__ : send the email regardless of contact status
         *       - __false__ : do not send the email
         * @enum {string}
         */
        DoubleOptIn: "true" | "false" | "new" | "not_active";
        /** DownloadCampaignLogExportFullResponse */
        DownloadCampaignLogExportFullResponse: {
            /** expires_on */
            expires_on: number;
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** DownloadCampaignLogExportResponse */
        DownloadCampaignLogExportResponse: {
            /** data */
            data: components["schemas"]["DownloadCampaignLogExportFullResponse"];
        };
        /** DownloadCampaignsReportsExportFullResponse */
        DownloadCampaignsReportsExportFullResponse: {
            /** expires_on */
            expires_on: number;
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** DownloadCampaignsReportsExportResponse */
        DownloadCampaignsReportsExportResponse: {
            /** data */
            data: components["schemas"]["DownloadCampaignsReportsExportFullResponse"];
        };
        /** DownloadContactsExportFullResponse */
        DownloadContactsExportFullResponse: {
            /** expires_on */
            expires_on: number;
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** DownloadContactsExportResponse */
        DownloadContactsExportResponse: {
            /** data */
            data: components["schemas"]["DownloadContactsExportFullResponse"];
        };
        /** DownloadListLogsExportFullResponse */
        DownloadListLogsExportFullResponse: {
            /** expires_on */
            expires_on: number;
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** DownloadListLogsExportResponse */
        DownloadListLogsExportResponse: {
            /** data */
            data: components["schemas"]["DownloadListLogsExportFullResponse"];
        };
        /** DownloadSuppressedEmailsExportFullResponse */
        DownloadSuppressedEmailsExportFullResponse: {
            /** expires_on */
            expires_on: number;
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** DownloadSuppressedEmailsExportResponse */
        DownloadSuppressedEmailsExportResponse: {
            /** data */
            data: components["schemas"]["DownloadSuppressedEmailsExportFullResponse"];
        };
        /** Email */
        Email: {
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * group_id
             * @description Allows the grouping multiple transactional emails for analytics
             */
            group_id?: number;
            /**
             * tracking
             * @default {
             *       "opens": true,
             *       "clicks_html": true,
             *       "clicks_text": true
             *     }
             */
            tracking: components["schemas"]["EmailTracking"];
            /** sender */
            sender: components["schemas"]["SenderAndName"];
            /** additional_headers */
            additional_headers?: components["schemas"]["AdditionalEmailHeader"][];
            /** attachment */
            attachment?: components["schemas"]["Attachment"] | components["schemas"]["Attachment"][];
            /** content */
            content: components["schemas"]["EmailContent"];
            /**
             * queue
             * @description Queue ID
             * @default 0
             */
            queue: number;
        };
        /** EmailAPIEmailContent */
        EmailAPIEmailContent: {
            /** subject */
            subject: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** template */
            template?: components["schemas"]["TemplateId"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
            /** custom_attributes */
            custom_attributes?: components["schemas"]["TemplateCustomAttributes"][];
            /**
             * type
             * @description Type of content.
             *
             *     - **marketing**: A marketing email is one that encourages participation in a commercial activity. For example, emails promoting products, services, typically sent to a broad audience. (e.g.,newsletters, promotional offers).
             *
             *     - **transactional**: A transactional email does not encourage participation in a commercial activity. For example, emails containing essential information related to a user-initiated actionor account activity (e.g., password resets, order confirmations).
             */
            type: components["schemas"]["SubmitEmailType"];
            /**
             * markup
             * @description JSON-LD Email Markup Data
             */
            markup?: Record<string, never>;
        };
        /**
         * EmailAPIEventType
         * @description An enumeration.
         * @enum {string}
         */
        EmailAPIEventType: "submitted" | "processing" | "click" | "open" | "bounce" | "spam" | "unsubscribe" | "unsubscribe_reason" | "global_unsubscribe" | "global_unsubscribe_reason" | "delivered" | "rejected" | "queued" | "error" | "other";
        /** EmailAPILogResponse */
        EmailAPILogResponse: {
            /**
             * id
             * Format: uuid
             */
            id: string;
            /** type */
            type: components["schemas"]["EmailAPIEventType"];
            /**
             * email_id
             * Format: uuid
             */
            email_id: string;
            /** time */
            time: number | string;
            /** email */
            email?: string;
            /** subject */
            subject?: string;
            /** provider */
            provider?: string;
            /** tags */
            tags?: string[];
            /** sender_name */
            sender_name?: string;
            /** sender_email */
            sender_email?: string;
            /** metadata */
            metadata?: Record<string, never>;
        };
        /** EmailAPILogsResponse */
        EmailAPILogsResponse: {
            /** pagination */
            pagination: components["schemas"]["HasMorePagination"];
            /** parameters */
            parameters: components["schemas"]["FilterParameters"];
            /** data */
            data: components["schemas"]["EmailAPILogResponse"][];
        };
        /** EmailAPIStatResponse */
        EmailAPIStatResponse: {
            /** submitted */
            submitted?: number;
            /** delivered */
            delivered?: number;
        };
        /** EmailAPIStatsIntervalResponse */
        EmailAPIStatsIntervalResponse: {
            /** interval_start */
            interval_start: number | string;
            /** interval_end */
            interval_end: number | string;
            /** submitted */
            submitted: number;
            /** rejected */
            rejected: number;
            /** error */
            error: number;
            /** queued */
            queued: number;
            /** processed */
            processed: number;
            /** delivered */
            delivered: number;
            /** unique_open */
            unique_open: number;
            /** unique_click */
            unique_click: number;
            /** open */
            open: number;
            /** click */
            click: number;
            /** bounce */
            bounce: number;
            /** hard_bounce */
            hard_bounce: number;
            /** soft_bounce */
            soft_bounce: number;
            /** spam */
            spam: number;
            /** unsubscribe */
            unsubscribe: number;
            /** global_unsubscribe */
            global_unsubscribe: number;
            /** unique_open_rate */
            unique_open_rate: number;
            /** unique_click_rate */
            unique_click_rate: number;
            /** open_rate */
            open_rate: number;
            /** click_rate */
            click_rate: number;
            /** clickthru_rate */
            clickthru_rate: number;
            /** delivery_rate */
            delivery_rate: number;
            /** error_rate */
            error_rate: number;
            /** reject_rate */
            reject_rate: number;
            /** bounce_rate */
            bounce_rate: number;
            /** global_unsubscribe_rate */
            global_unsubscribe_rate: number;
            /** unsubscribe_rate */
            unsubscribe_rate: number;
            /** spam_rate */
            spam_rate: number;
        };
        /** EmailAPIStatsResponse */
        EmailAPIStatsResponse: {
            /** parameters */
            parameters: components["schemas"]["FilterParameters"];
            /** data */
            data: components["schemas"]["EmailAPIStatsIntervalResponse"][];
        };
        /**
         * EmailAPISummaryEngagementEnum
         * @description An enumeration.
         * @enum {string}
         */
        EmailAPISummaryEngagementEnum: "click" | "open" | "none" | "open_not_click";
        /** EmailAPISummaryItem */
        EmailAPISummaryItem: {
            /**
             * email_id
             * Format: uuid
             */
            email_id: string;
            /** status */
            status: components["schemas"]["EmailAPIEventType"];
            /** email */
            email: string;
            /** subject */
            subject?: string;
            /** tags */
            tags?: string[];
            /** provider */
            provider?: string;
            /** submitted_time */
            submitted_time: number | string;
            /** delivered_time */
            delivered_time?: number | string;
            /** first_open_time */
            first_open_time?: number | string;
            /** first_click_time */
            first_click_time?: number | string;
            /** first_engagement_time */
            first_engagement_time?: number | string;
            /** last_engagement_time */
            last_engagement_time?: number | string;
            /**
             * unsubscribed
             * @default false
             */
            unsubscribed: boolean;
            /**
             * global_unsubscribed
             * @default false
             */
            global_unsubscribed: boolean;
            /**
             * soft_bounce
             * @default false
             */
            soft_bounce: boolean;
            /**
             * hard_bounce
             * @default false
             */
            hard_bounce: boolean;
            /**
             * reported_as_spam
             * @default false
             */
            reported_as_spam: boolean;
            /**
             * open
             * @default 0
             */
            open: number;
            /**
             * click
             * @default 0
             */
            click: number;
        };
        /** EmailAPISummaryResponse */
        EmailAPISummaryResponse: {
            /** pagination */
            pagination: components["schemas"]["HasMorePagination"];
            /** parameters */
            parameters: components["schemas"]["FilterParameters"];
            /** data */
            data: components["schemas"]["EmailAPISummaryItem"][];
        };
        /**
         * EmailAPISummaryStatus
         * @description An enumeration.
         * @enum {string}
         */
        EmailAPISummaryStatus: "submitted" | "delivered" | "queued" | "rejected" | "error" | "bounced" | "spam" | "unsubscribed" | "global_unsubscribed" | "other";
        /** EmailContent */
        EmailContent: {
            /** subject */
            subject: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** template */
            template?: components["schemas"]["TemplateInfo"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
            /** custom_attributes */
            custom_attributes?: components["schemas"]["TemplateCustomAttributes"][];
        };
        /** EmailContentResponse */
        EmailContentResponse: {
            /** subject */
            subject?: string;
            /** template_id */
            template_id?: number;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["CustomAttributeResp"][];
            /** type */
            type?: components["schemas"]["SubmitEmailType"];
        };
        /** EmailGroupId */
        EmailGroupId: {
            /** id */
            id: number;
            /** description */
            description?: string;
        };
        /** EmailLogResponse */
        EmailLogResponse: {
            /** type */
            type?: components["schemas"]["EventTypeResponse"];
            /** timestamp */
            timestamp?: number;
            /** email */
            email?: string;
            /** email_id */
            email_id?: number;
            /** group_id */
            group_id?: number;
            /** user_agent */
            user_agent?: components["schemas"]["UserInfo"];
            /** clickthru_url */
            clickthru_url?: string;
            /** dsn_message */
            dsn_message?: string;
            /** sender_name */
            sender_name?: string;
            /** sender_email */
            sender_email?: string;
            /** source_ip */
            source_ip?: string;
            /** envelope_from */
            envelope_from?: string;
            /** additional_headers */
            additional_headers?: components["schemas"]["AdditionalEmailHeader"][];
        };
        /** EmailLogsResponse */
        EmailLogsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["EmailLogResponse"][];
        };
        /** EmailSenderResponse */
        EmailSenderResponse: {
            /** id */
            id?: string;
            /** name */
            name?: string;
            /** email */
            email?: string;
        };
        /** EmailStatResponse */
        EmailStatResponse: {
            /** date */
            date: number;
            /** sent_emails */
            sent_emails: number;
            /** open_rate */
            open_rate: number;
            /** bounce_rate */
            bounce_rate: number;
            /** click_rate */
            click_rate: number;
            /** spam_rate */
            spam_rate: number;
        };
        /** EmailStatsResponse */
        EmailStatsResponse: {
            /** data */
            data: components["schemas"]["EmailStatResponse"][];
        };
        /** EmailTracking */
        EmailTracking: {
            /**
             * opens
             * @description Enable the tracking of opens (only available for the HTML version)
             * @default true
             */
            opens: boolean;
            /**
             * clicks_html
             * @description Enable the tracking of link clicks in the HTML version
             * @default true
             */
            clicks_html: boolean;
            /**
             * clicks_text
             * @description Enable the tracking of link clicks in the text version
             * @default true
             */
            clicks_text: boolean;
        };
        /** EmailTrackingResponse */
        EmailTrackingResponse: {
            /** opens */
            opens: boolean;
            /** clicks_html */
            clicks_html: boolean;
            /** clicks_text */
            clicks_text: boolean;
        };
        /** EnableSubscriptionFormEndpointResponse */
        EnableSubscriptionFormEndpointResponse: {
            /**
             * object
             * @default subscription_form_endpoint
             */
            object: string;
            /**
             * enabled
             * @default true
             */
            enabled: boolean;
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /**
         * encoding
         * @description An enumeration.
         * @enum {string}
         */
        Encoding: "utf-8" | "armscii-8" | "ascii" | "big-5" | "cp51932" | "cp866" | "cp936" | "euc-cn" | "euc-jp" | "eucjp-win" | "euc-kr" | "euc-tw" | "hz" | "iso-2022-jp" | "iso-2022-jp-ms" | "iso-2022-kr" | "iso-8859-1" | "iso-8859-10" | "iso-8859-13" | "iso-8859-14" | "iso-8859-15" | "iso-8859-16" | "iso-8859-2" | "iso-8859-3" | "iso-8859-4" | "iso-8859-5" | "iso-8859-6" | "iso-8859-7" | "iso-8859-8" | "iso-8859-9" | "jis" | "koi8-r" | "sjis" | "sjis-win" | "uhc" | "windows-1251" | "windows-1252";
        /**
         * EncodingResponse
         * @description An enumeration.
         * @enum {string}
         */
        EncodingResponse: "utf-8" | "armscii-8" | "ascii" | "big-5" | "cp51932" | "cp866" | "cp936" | "euc-cn" | "euc-jp" | "eucjp-win" | "euc-kr" | "euc-tw" | "hz" | "iso-2022-jp" | "iso-2022-jp-ms" | "iso-2022-kr" | "iso-8859-1" | "iso-8859-10" | "iso-8859-13" | "iso-8859-14" | "iso-8859-15" | "iso-8859-16" | "iso-8859-2" | "iso-8859-3" | "iso-8859-4" | "iso-8859-5" | "iso-8859-6" | "iso-8859-7" | "iso-8859-8" | "iso-8859-9" | "jis" | "koi8-r" | "sjis" | "sjis-win" | "uhc" | "windows-1251" | "windows-1252" | "other";
        /**
         * EventType
         * @description An enumeration.
         * @enum {string}
         */
        EventType: "Account.Created" | "Account.Updated" | "Account.Confirmed" | "Account.Deleted" | "Contact.Added" | "Contact.Updated" | "Contact.Removed" | "Contact.Tagged" | "Contact.Untagged" | "ContactsExport.Created" | "ContactsExport.Deleted" | "Campaign.Canceled" | "Campaign.Created" | "Campaign.Unscheduled" | "Campaign.Updated" | "Campaign.Resumed" | "Campaign.Scheduled" | "Campaign.Suspended" | "CampaignLogExport.Created" | "Email.Sent" | "Email.Opened" | "Email.Clicked" | "Email.Bounced" | "Email.ReportedAsSpam" | "Email.Unsubscribed" | "Email.GlobalUnsubscribed" | "Email.Submitted" | "Email.Queued" | "Email.Rejected" | "Email.Processing" | "Email.Delivered" | "Email.Error" | "User.Created" | "User.Deleted" | "User.LoggedIn" | "User.Updated" | "User.Confirmed" | "List.Created" | "List.Updated" | "List.Deleted" | "ListLogsExport.Created" | "MFA.RecoveryCodesViewed" | "MFA.ChallengeIssued" | "MFA.ChallengeCompleted" | "MFA.MethodAdded" | "MFA.MethodActivated" | "MFA.MethodDeleted" | "Segment.Created" | "Segment.Updated" | "Segment.Deleted" | "Sender.Created" | "Sender.Updated" | "Sender.Deleted" | "Sender.Confirmed" | "Sender.ConfirmationEmailSent" | "SuppressedEmail.Added" | "SuppressedEmail.Removed" | "SuppressedEmailsExport.Created" | "SuppressedEmailsExport.Deleted";
        /**
         * EventTypeResponse
         * @description exposed_string = database_string
         * @enum {string}
         */
        EventTypeResponse: "clickthru" | "click" | "open" | "bounce" | "bounce_ac" | "bounce_cr" | "bounce_df" | "bounce_fm" | "bounce_hb" | "bounce_mb" | "bounce_sb" | "bounce_tr" | "bounce_ar" | "forward" | "skipped" | "spam" | "subscribe" | "unsubscribe" | "view" | "share" | "in_queue" | "generating" | "received" | "sent" | "schedule" | "update" | "global_unsubscribe" | "unsub_reason" | "other" | "auto_responder";
        /** FilterParameters */
        FilterParameters: {
            /** start_time */
            start_time?: number | string;
            /** end_time */
            end_time?: number | string;
            /** interval */
            interval?: string;
            /** resolution */
            resolution?: string;
            /**
             * iso_time
             * @default false
             */
            iso_time: boolean;
            /** timezone */
            timezone?: string;
            /** tags */
            tags?: Record<string, never>;
            /** providers */
            providers?: Record<string, never>;
        };
        /** ForbiddenMessage */
        ForbiddenMessage: {
            /** code */
            code?: number;
            /** msg */
            msg: string;
            /**
             * type
             * @default forbidden
             */
            type: string;
        };
        /** ForgotMyPassword */
        ForgotMyPassword: {
            /**
             * email
             * Format: email
             */
            email: string;
        };
        /** FormContent */
        FormContent: {
            /**
             * embedded
             * @description The HTML content representing the form that can be embedded on a website
             */
            embedded?: string;
            /**
             * linked
             * @description The HTML content representing the hosted version of the form
             */
            linked?: string;
        };
        /** FormContentResponse */
        FormContentResponse: {
            /** linked */
            linked?: string;
            /** embedded */
            embedded?: string;
        };
        /** FormFullResponse */
        FormFullResponse: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** status */
            status: components["schemas"]["FormStatus"];
            /** content */
            content: components["schemas"]["FormContentResponse"];
            /** language */
            language: components["schemas"]["Languages"];
            /** created_on */
            created_on?: number;
            /** last_updated_on */
            last_updated_on?: number;
            /** url */
            url: components["schemas"]["FormUrlsResponse"];
            /**
             * thumbnail
             * @deprecated
             */
            thumbnail?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
            /** redirections */
            redirections: components["schemas"]["FormRedirectionsResponse"];
            /** list_id */
            list_id?: number;
            /** double_opt_in */
            double_opt_in?: boolean;
        };
        /** FormRedirections */
        FormRedirections: {
            /**
             * after_opt_in
             * Format: uri
             */
            after_opt_in?: string;
            /**
             * after_double_opt_in
             * Format: uri
             */
            after_double_opt_in?: string;
            /**
             * after_opt_out
             * Format: uri
             */
            after_opt_out?: string;
        };
        /** FormRedirectionsResponse */
        FormRedirectionsResponse: {
            /** after_opt_in */
            after_opt_in?: string;
            /** after_double_opt_in */
            after_double_opt_in?: string;
            /** after_opt_out */
            after_opt_out?: string;
        };
        /** FormResponse */
        FormResponse: {
            /** data */
            data: components["schemas"]["FormFullResponse"];
        };
        /**
         * status
         * @description An enumeration.
         * @enum {string}
         */
        FormStatus: "active" | "deleted";
        /** FormUrlsResponse */
        FormUrlsResponse: {
            /** linked */
            linked?: string;
            /** embedded */
            embedded?: string;
        };
        /** FormsResponse */
        FormsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["FormFullResponse"][];
        };
        /** GetActionResponse */
        GetActionResponse: {
            /** data */
            data: components["schemas"]["ActionResponse"];
        };
        /** GetCampaignsReportsExportResponse */
        GetCampaignsReportsExportResponse: {
            /** data */
            data: components["schemas"]["CampaignsReportsExportResponse"];
        };
        /** GetEmailResponse */
        GetEmailResponse: {
            /**
             * email_id
             * Format: uuid
             */
            email_id: string;
            /** status */
            status: components["schemas"]["EmailAPIEventType"];
            /** email */
            email: string;
            /** provider */
            provider?: string;
            /** submitted_time */
            submitted_time: number;
            /**
             * unsubscribed
             * @default false
             */
            unsubscribed: boolean;
            /**
             * global_unsubscribed
             * @default false
             */
            global_unsubscribed: boolean;
            /**
             * soft_bounced
             * @default false
             */
            soft_bounced: boolean;
            /**
             * hard_bounced
             * @default false
             */
            hard_bounced: boolean;
            /**
             * reported_as_spam
             * @default false
             */
            reported_as_spam: boolean;
            /**
             * open
             * @default 0
             */
            open: number;
            /**
             * click
             * @default 0
             */
            click: number;
            /** list_id */
            list_id?: number;
            /** tags */
            tags?: string[];
            /** sender */
            sender: components["schemas"]["EmailSenderResponse"];
            /** content */
            content: components["schemas"]["EmailContentResponse"];
            /** tracking */
            tracking: components["schemas"]["EmailTrackingResponse"];
            /** additional_headers */
            additional_headers?: components["schemas"]["AdditionalEmailHeader"][];
            /** thumbnail_url */
            thumbnail_url?: string;
        };
        /** GetMFAPortalResponse */
        GetMFAPortalResponse: {
            /**
             * url
             * Format: uri
             */
            url: string;
        };
        /** GetSuppressedEmailsExportResponse */
        GetSuppressedEmailsExportResponse: {
            /** data */
            data: components["schemas"]["SuppressedEmailsExportResponse"];
        };
        /** GetWorkflowResponse */
        GetWorkflowResponse: {
            /** data */
            data: components["schemas"]["WorkflowResponse"];
        };
        /** HTTPBadRequestError */
        HTTPBadRequestError: {
            /** detail */
            detail: components["schemas"]["BadRequestMessage"][];
        };
        /** HTTPForbiddenError */
        HTTPForbiddenError: {
            /** detail */
            detail: components["schemas"]["ForbiddenMessage"][];
        };
        /** HTTPUnauthorizedError */
        HTTPUnauthorizedError: {
            /** detail */
            detail: components["schemas"]["UnauthorizedMessage"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HasMorePagination */
        HasMorePagination: {
            /**
             * page
             * @default 1
             */
            page: number;
            /** per_page */
            per_page?: number;
            /**
             * has_more
             * @default false
             */
            has_more: boolean;
        };
        /** ImportContactData */
        ImportContactData: {
            /**
             * email
             * Format: email
             */
            email: string;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
            /** tags */
            tags?: string[];
            /** interests */
            interests?: string[];
        };
        /** ImportContactInvalidCustomAttributeErrorResponse */
        ImportContactInvalidCustomAttributeErrorResponse: {
            /** loc */
            loc: string[];
            /**
             * msg
             * @default Invalid custom attribute
             */
            msg: string;
            /**
             * code
             * @default 8014
             */
            code: number;
        };
        /** ImportContactNotFoundErrorResponse */
        ImportContactNotFoundErrorResponse: {
            /** loc */
            loc: string[];
            /**
             * msg
             * @default Contact not found
             */
            msg: string;
            /**
             * code
             * @default 8001
             */
            code: number;
        };
        /** ImportContactUnknownErrorResponse */
        ImportContactUnknownErrorResponse: {
            /** loc */
            loc: string[];
            /**
             * msg
             * @default Unknown error
             */
            msg: string;
            /**
             * code
             * @default 8015
             */
            code: number;
        };
        /** ImportContacts */
        ImportContacts: {
            /** import_to */
            import_to?: components["schemas"]["ContactStatus"];
            /** contacts */
            contacts: components["schemas"]["ImportContactData"][];
            /**
             * resubscribe
             * @default false
             */
            resubscribe: boolean;
            /**
             * remove_tags
             * @description Tags are removed if omitted.
             * @default true
             */
            remove_tags: boolean;
            /**
             * remove_interests
             * @description Interests are removed if omitted.
             * @default true
             */
            remove_interests: boolean;
        };
        /** ImportContactsResponse */
        ImportContactsResponse: {
            /**
             * import_id
             * Format: uuid4
             */
            import_id?: string;
            /** id */
            id: number[];
            /**
             * object
             * @default contact
             */
            object: string;
            /**
             * imported
             * @default true
             */
            imported: boolean;
            /**
             * data
             * @default []
             */
            data: components["schemas"]["ContactFullResponse"][];
            /** errors */
            errors?: (components["schemas"]["ImportContactNotFoundErrorResponse"] | components["schemas"]["ImportContactInvalidCustomAttributeErrorResponse"] | components["schemas"]["ImportContactUnknownErrorResponse"])[];
        };
        /** InterestCreate */
        InterestCreate: {
            /** name */
            name: string;
            /** alias */
            alias?: string;
        };
        /** InterestCreatedResponse */
        InterestCreatedResponse: {
            /**
             * object
             * @default interest
             */
            object: string;
            /** data */
            data: components["schemas"]["InterestFullResponse"];
            /**
             * created
             * @default true
             */
            created: boolean;
        };
        /** InterestDeletedResponse */
        InterestDeletedResponse: {
            /**
             * object
             * @default interest
             */
            object: string;
            /** data */
            data: components["schemas"]["InterestFullResponse"];
            /**
             * deleted
             * @default true
             */
            deleted: boolean;
        };
        /** InterestFullResponse */
        InterestFullResponse: {
            /** name */
            name: string;
            /** alias */
            alias?: string;
            /** usage */
            usage?: number;
        };
        /** InterestPatch */
        InterestPatch: {
            /** name */
            name?: string;
            /** alias */
            alias?: string;
        };
        /** InterestPatchedResponse */
        InterestPatchedResponse: {
            /**
             * object
             * @default interest
             */
            object: string;
            /** data */
            data: components["schemas"]["InterestFullResponse"];
            /**
             * patched
             * @default true
             */
            patched: boolean;
        };
        /** InterestResponse */
        InterestResponse: {
            /** data */
            data: components["schemas"]["InterestFullResponse"];
        };
        /** InterestsResponse */
        InterestsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["InterestFullResponse"][];
        };
        /**
         * IntervalEnum
         * @description An enumeration.
         * @enum {string}
         */
        IntervalEnum: "5m" | "15m" | "30m" | "1h" | "1d";
        /**
         * language
         * @description Supported Locales
         * @enum {string}
         */
        Languages: "da" | "da_DK" | "de" | "de_DE" | "el" | "el_GR" | "en" | "en_US" | "en_GB" | "en_UK" | "es" | "es_US" | "es_ES" | "et" | "et_EE" | "fi" | "fi_FI" | "fr" | "fr_CA" | "fr_FR" | "he" | "he_IL" | "id" | "id_ID" | "it" | "it_IT" | "ja" | "ja_JP" | "nl" | "nl_NL" | "no" | "no_NO" | "pt" | "pt_BR" | "ro" | "ro_RO" | "ru" | "ru_RU" | "sv" | "sv_SE" | "th" | "th_TH" | "tr" | "tr_TR" | "vi" | "vi_VN" | "zh" | "zh_CN" | "aa" | "ab" | "ae" | "af" | "ak" | "am" | "an" | "ar" | "av" | "ay" | "az" | "ba" | "be" | "bg" | "bh" | "bi" | "bm" | "bn" | "bo" | "br" | "bs" | "ca" | "ce" | "ch" | "co" | "cr" | "cs" | "cu" | "cv" | "cy" | "dv" | "dz" | "ee" | "eo" | "eu" | "fa" | "ff" | "fj" | "fo" | "fy" | "ga" | "gd" | "gl" | "gn" | "gu" | "gv" | "ha" | "hi" | "ho" | "hr" | "ht" | "hu" | "hy" | "hz" | "ia" | "ie" | "ig" | "ii" | "ik" | "io" | "is_IS" | "iu" | "jv" | "ka" | "kg" | "ki" | "kj" | "kk" | "kl" | "km" | "kn" | "ko" | "kr" | "ks" | "ku" | "kv" | "kw" | "ky" | "la" | "lb" | "lg" | "li" | "ln" | "lo" | "lt" | "lu" | "lv" | "mg" | "mh" | "mi" | "mk" | "ml" | "mn" | "mr" | "ms" | "mt" | "my" | "na" | "nb" | "nd" | "ne" | "ng" | "nn" | "nr" | "nv" | "ny" | "oc" | "oj" | "om" | "os" | "pa" | "pi" | "pl" | "ps" | "qu" | "rm" | "rn" | "rw" | "sa" | "sc" | "sd" | "se" | "sg" | "si" | "sk" | "sl" | "sm" | "sn" | "so" | "sq" | "sr" | "ss" | "st" | "su" | "sw" | "ta" | "te" | "tg" | "ti" | "tk" | "tl" | "tn" | "to" | "ts" | "tt" | "tw" | "ty" | "ug" | "uk" | "ur" | "uz" | "ve" | "vo" | "wa" | "wo" | "xh" | "yi" | "yo" | "za" | "zu";
        /** LinkFullResponse */
        LinkFullResponse: {
            /** id */
            id: number;
            /** status */
            status: string;
            /** link_to */
            link_to: string;
        };
        /** LinkInfoFullResponse */
        LinkInfoFullResponse: {
            /** mailing_id */
            mailing_id: number;
        };
        /** LinkInfoResponse */
        LinkInfoResponse: {
            /** data */
            data: components["schemas"]["LinkInfoFullResponse"];
        };
        /** LinksResponse */
        LinksResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["LinkFullResponse"][];
        };
        /** List */
        List: {
            /**
             * name
             * @description List Name
             */
            name: string;
            /** default_sender */
            default_sender: components["schemas"]["Sender"];
            /**
             * language
             * @default en_US
             */
            language: components["schemas"]["Languages"];
            /**
             * redirections
             * @default {}
             */
            redirections: components["schemas"]["Redirections"];
            /**
             * webhook
             * @default {}
             */
            webhook: components["schemas"]["api__schemas__requests__lists__Webhook"];
        };
        /** ListCampaignsReportsExportsResponse */
        ListCampaignsReportsExportsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["CampaignsReportsExportResponse"][];
        };
        /** ListEmailGroupIdsResponse */
        ListEmailGroupIdsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["EmailGroupId"][];
        };
        /** ListEmailTagsResponse */
        ListEmailTagsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: string[];
        };
        /** ListFullResponse */
        ListFullResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** status */
            status: string;
            /**
             * policy_accepted
             * @default false
             */
            policy_accepted: boolean;
            /** language */
            language: string;
            /** created_on */
            created_on: number;
            /** default_sender */
            default_sender: components["schemas"]["ListSenderResponse"];
            /** redirections */
            redirections: components["schemas"]["ListRedirectionsResponse"];
            /** pages */
            pages: components["schemas"]["ListPagesResponse"];
            /** webhook */
            webhook: components["schemas"]["ListWebhookResponse"];
        };
        /** ListLogResponse */
        ListLogResponse: {
            /** id */
            id?: number;
            /** contact_id */
            contact_id?: number;
            /** email */
            email?: string;
            /** type */
            type?: components["schemas"]["EventTypeResponse"];
            /** timestamp */
            timestamp?: number;
            /** occurrences */
            occurrences?: number;
            /** user_agent */
            user_agent?: components["schemas"]["UserInfo"];
            /** campaign_id */
            campaign_id?: number;
            /** clickthru_url */
            clickthru_url?: string;
            /** dsn_message */
            dsn_message?: string;
            /** unsub_reason */
            unsub_reason?: string;
            /** subscription_type */
            subscription_type?: components["schemas"]["SubscriptionTypeResponse"];
        };
        /** ListLogsExportFullResponse */
        ListLogsExportFullResponse: {
            /** id */
            id: string;
            /** list_id */
            list_id: number;
            /** status */
            status: components["schemas"]["ListLogsExportStatus"];
            /** description */
            description?: string;
            /** requested_by */
            requested_by: components["schemas"]["ListLogsExportRequestedBy"];
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /** progress */
            progress: number;
        };
        /** ListLogsExportRequestedBy */
        ListLogsExportRequestedBy: {
            /** id */
            id: number;
            /** email */
            email: string;
        };
        /**
         * ListLogsExportStatus
         * @description An enumeration.
         * @enum {string}
         */
        ListLogsExportStatus: "pending" | "ready" | "deleted" | "failed";
        /** ListLogsExportsResponse */
        ListLogsExportsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ListLogsExportFullResponse"][];
        };
        /** ListLogsResponse */
        ListLogsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ListLogResponse"][];
        };
        /** ListMFAResponse */
        ListMFAResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["MFAResponse"][];
        };
        /** ListPagesResponse */
        ListPagesResponse: {
            /** opt_in */
            opt_in?: string;
            /** opt_out */
            opt_out?: string;
            /** subscribe */
            subscribe?: string;
            /** unsubscribe */
            unsubscribe?: string;
        };
        /** ListRedirectionsResponse */
        ListRedirectionsResponse: {
            /** after_opt_in */
            after_opt_in?: string;
            /** after_double_opt_in */
            after_double_opt_in?: string;
            /** after_opt_out */
            after_opt_out?: string;
        };
        /** ListResponse */
        ListResponse: {
            /** data */
            data: components["schemas"]["ListFullResponse"];
        };
        /** ListSenderResponse */
        ListSenderResponse: {
            /** name */
            name?: string;
            /** email */
            email?: string;
        };
        /** ListStatResponse */
        ListStatResponse: {
            /** active_contacts */
            active_contacts: number;
            /** pending_contacts */
            pending_contacts: number;
            /** invalid_contacts */
            invalid_contacts: number;
            /** unsubscribed_contacts */
            unsubscribed_contacts: number;
            /** flagged_contacts */
            flagged_contacts: number;
            /** deleted_contacts */
            deleted_contacts: number;
            /** sent_emails */
            sent_emails: number;
            /** open_rate */
            open_rate: number;
            /** bounce_rate */
            bounce_rate: number;
            /** click_rate */
            click_rate: number;
            /** clickthru_rate */
            clickthru_rate: number;
            /** unsubscribe_rate */
            unsubscribe_rate: number;
            /** spam_rate */
            spam_rate: number;
        };
        /** ListStatsResponse */
        ListStatsResponse: {
            /** data */
            data: components["schemas"]["ListStatResponse"];
        };
        /** ListSubscriptionFormEndpointResponse */
        ListSubscriptionFormEndpointResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"][];
        };
        /** ListSummaryResponse */
        ListSummaryResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** status */
            status: string;
            /** language */
            language: string;
            /** created_on */
            created_on?: number;
            /** default_sender */
            default_sender: components["schemas"]["ListSenderResponse"];
        };
        /** ListSuppressedEmailsExportsResponse */
        ListSuppressedEmailsExportsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["SuppressedEmailsExportResponse"][];
        };
        /** ListTasksResponse */
        ListTasksResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["TaskFullResponse"][];
        };
        /** ListTransactionalEmailTemplateResponse */
        ListTransactionalEmailTemplateResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["TransactionalEmailTemplateSummaryResponse"][];
        };
        /**
         * actions
         * @description An enumeration.
         * @enum {string}
         */
        ListWebhookAction: "all" | "subscribe" | "unsubscribe" | "update" | "delete" | "spam" | "bounce" | "bounce_ac" | "bounce_cr" | "bounce_df" | "bounce_fm" | "bounce_hb" | "bounce_mb" | "bounce_sb" | "bounce_tr" | "bounce_ar";
        /** ListWebhookResponse */
        ListWebhookResponse: {
            /** url */
            url?: string;
            /** actions */
            actions?: components["schemas"]["ListWebhookAction"][];
        };
        /** ListWebhooksResponse */
        ListWebhooksResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"][];
        };
        /** ListWorkflowsResponse */
        ListWorkflowsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["WorkflowResponse"][];
        };
        /** ListsResponse */
        ListsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["ListSummaryResponse"][];
        };
        /** LockWorkflow */
        LockWorkflow: {
            /** key */
            key: string;
        };
        /** LockWorkflowResponse */
        LockWorkflowResponse: {
            /**
             * object
             * @default workflow
             */
            object: string;
            /** locked */
            locked: boolean;
            /** expires_in */
            expires_in: number;
        };
        /**
         * log_type
         * @description An enumeration.
         * @enum {string}
         */
        LogType: "bounce" | "clickthru" | "sent" | "open" | "unsubscribe" | "resubscribe" | "spam" | "global_unsubscribe" | "all";
        /**
         * log_type
         * @description An enumeration.
         * @enum {string}
         */
        LogTypeV2: "all" | "submitted" | "rejected" | "error" | "queued" | "delivered" | "open" | "click" | "bounce" | "unsubscribe" | "global_unsubscribe" | "spam";
        /** MFAResponse */
        MFAResponse: {
            /** id */
            id: string;
            /** type */
            type: components["schemas"]["MFAType"];
            /** description */
            description?: string;
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        MFAType: "totp";
        /** NewTOTPMFAResponse */
        NewTOTPMFAResponse: {
            /** id */
            id: string;
            /**
             * type
             * @default totp
             */
            type: components["schemas"]["MFAType"];
            /** description */
            description?: string;
            /**
             * qr_code
             * @description A base64 encoded inline image of a QR code
             */
            qr_code: string;
            /**
             * secret
             * @description A secret key
             */
            secret: string;
        };
        /** OperatingSystemInfo */
        OperatingSystemInfo: {
            /** family */
            family?: string;
            /** version */
            version?: string;
        };
        /** Pagination */
        Pagination: {
            /**
             * page
             * @default 1
             */
            page: number;
            /** per_page */
            per_page?: number;
            /** count */
            count?: number;
        };
        /** PaginationWithCursor */
        PaginationWithCursor: {
            /**
             * page
             * @default 1
             */
            page: number;
            /** per_page */
            per_page?: number;
            /** count */
            count?: number;
            /** cursor */
            cursor?: components["schemas"]["Cursor"];
        };
        /**
         * grant_type
         * @description An enumeration.
         * @enum {string}
         */
        PasswordGrantType: "password" | "refresh_token";
        /**
         * PasswordStrengthRequirement
         * @description An enumeration.
         * @enum {string}
         */
        PasswordStrengthRequirement: "VERY_WEAK" | "WEAK" | "MODERATE" | "STRONG" | "VERY_STRONG";
        /** PatchAccount */
        PatchAccount: {
            /** address */
            address?: components["schemas"]["Address"];
            /** name */
            name?: string;
            /** account_owner */
            account_owner?: components["schemas"]["AccountOwner"];
            /** fax */
            fax?: string;
            /** phone */
            phone?: string;
            /**
             * domains
             * @default {}
             */
            domains: components["schemas"]["Domains"];
            /**
             * website
             * Format: uri
             */
            website?: string;
            /**
             * usage_limits
             * @default {}
             */
            usage_limits: components["schemas"]["UsageLimits"];
            /** trial */
            trial?: boolean;
            /** partner */
            partner?: boolean;
            /** metadata */
            metadata?: Record<string, never>;
        };
        /** PatchAccountResponse */
        PatchAccountResponse: {
            /** data */
            data: components["schemas"]["AccountFullResponse"];
            /**
             * warnings
             * @default []
             */
            warnings: Record<string, never>[];
        };
        /** PatchAction */
        PatchAction: {
            /** name */
            name?: string;
            /** parent_id */
            parent_id?: string;
            /** condition */
            condition?: components["schemas"]["ActionCondition"];
            /** delay */
            delay?: number;
            /** type */
            type?: components["schemas"]["ActionType"];
            /** email_settings */
            email_settings?: components["schemas"]["PatchActionEmailSettings"];
        };
        /** PatchActionContent */
        PatchActionContent: {
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
            /** type */
            type?: components["schemas"]["ContentType"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
        };
        /** PatchActionEmailSettings */
        PatchActionEmailSettings: {
            /** tracking */
            tracking?: components["schemas"]["PatchActionTracking"];
            /** content */
            content?: components["schemas"]["PatchActionContent"];
            /** sender */
            sender?: components["schemas"]["Sender"];
        };
        /** PatchActionResponse */
        PatchActionResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default action
             */
            object: string;
            /**
             * patched
             * @default true
             */
            patched: boolean;
            /** data */
            data: components["schemas"]["ActionResponse"];
        };
        /** PatchActionTracking */
        PatchActionTracking: {
            /** opens */
            opens?: boolean;
            /** clicks_html */
            clicks_html?: boolean;
            /** clicks_text */
            clicks_text?: boolean;
        };
        /** PatchCampaign */
        PatchCampaign: {
            /** name */
            name?: string;
            /**
             * audience
             * @default {}
             */
            audience: components["schemas"]["Audience"];
            /** tracking */
            tracking?: components["schemas"]["PatchTracking"];
            /** sender */
            sender?: components["schemas"]["SenderAndName"];
            /**
             * reply_to_email
             * Format: email
             * @description Specify a different reply-to email address than the sender
             */
            reply_to_email?: string;
            /**
             * content
             * @default {}
             */
            content: components["schemas"]["PatchCampaignContent"];
        };
        /** PatchCampaignContent */
        PatchCampaignContent: {
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
            /** type */
            type?: components["schemas"]["ContentType"];
            /** encoding */
            encoding?: components["schemas"]["Encoding"];
            /** default_unsubscribe_link */
            default_unsubscribe_link?: boolean;
        };
        /** PatchCampaignResponse */
        PatchCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["CampaignFullResponse"];
        };
        /** PatchContact */
        PatchContact: {
            /**
             * email
             * Format: email
             */
            email?: string;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
            /** interests */
            interests?: string[];
            /** tags */
            tags?: string[];
        };
        /** PatchContactResponse */
        PatchContactResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default contact
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["ContactFullResponse"];
        };
        /** PatchDomains */
        PatchDomains: {
            /** domains */
            domains: components["schemas"]["Domains"];
        };
        /** PatchDomainsResponse */
        PatchDomainsResponse: {
            /**
             * object
             * @default domains
             */
            object: string;
            /**
             * patched
             * @default true
             */
            patched: boolean;
            /** data */
            data: components["schemas"]["DomainsFullResponse"];
        };
        /** PatchEmailGroupId */
        PatchEmailGroupId: {
            /** description */
            description: string;
        };
        /** PatchEmailGroupIdResponse */
        PatchEmailGroupIdResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default email-group-id
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["RelayGroupId"];
        };
        /** PatchForm */
        PatchForm: {
            /** name */
            name?: string;
            /** status */
            status?: string;
            /**
             * content
             * @default {}
             */
            content: components["schemas"]["FormContent"];
            /**
             * redirections
             * @default {}
             */
            redirections: components["schemas"]["FormRedirections"];
            /** list_id */
            list_id?: number;
            /** language */
            language?: components["schemas"]["Languages"];
            /** double_opt_in */
            double_opt_in?: boolean;
        };
        /** PatchFormResponse */
        PatchFormResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default form
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["FormFullResponse"];
        };
        /** PatchListResponse */
        PatchListResponse: {
            /** id */
            id: number;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["ListFullResponse"];
        };
        /** PatchSegmentResponse */
        PatchSegmentResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default segment
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["SegmentFullResponse"];
        };
        /** PatchSelfAccount */
        PatchSelfAccount: {
            /** address */
            address?: components["schemas"]["Address"];
            /** name */
            name?: string;
            /** account_owner */
            account_owner?: components["schemas"]["AccountOwner"];
            /** fax */
            fax?: string;
            /** phone */
            phone?: string;
            /**
             * domains
             * @default {}
             */
            domains: components["schemas"]["Domains"];
            /**
             * website
             * Format: uri
             */
            website?: string;
        };
        /** PatchSenderResponse */
        PatchSenderResponse: {
            /** id */
            id: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /**
             * object
             * @default sender
             */
            object: string;
            /** data */
            data: components["schemas"]["SenderFullResponse"];
        };
        /** PatchSubscriptionFormEndpointRequest */
        PatchSubscriptionFormEndpointRequest: {
            /**
             * domain
             * @description domain name hosting the form
             */
            domain?: string;
            /**
             * name
             * @description Name of the form
             */
            name?: string;
            /**
             * double_opt_in
             * @description Whether to use double opt in
             */
            double_opt_in?: boolean;
            /**
             * secret
             * @description Google reCaptcha secret key
             */
            secret?: string;
            /**
             * post_redirect_url
             * @description Instead of the usual API reply, redirect to this URL when submitting the form.
             */
            post_redirect_url?: string;
            /**
             * double_opt_in_redirect_url
             * @description Redirect to this URL after the double opt in callback.
             */
            double_opt_in_redirect_url?: string;
            /**
             * async_processing
             * @description Whether to process the form submission asynchronously.
             */
            async_processing?: boolean;
        };
        /** PatchSubscriptionFormEndpointResponse */
        PatchSubscriptionFormEndpointResponse: {
            /**
             * object
             * @default subscription_form_endpoint
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /** PatchTag */
        PatchTag: {
            /** tag */
            tag: string;
        };
        /** PatchTagResponse */
        PatchTagResponse: {
            /** tag */
            tag: string;
            /**
             * object
             * @default tag
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["TagFullResponse"];
        };
        /** PatchTemplate */
        PatchTemplate: {
            /** name */
            name?: string;
            /** description */
            description?: string;
            /** content */
            content?: components["schemas"]["PatchTemplateContent"];
            /** tags */
            tags?: string[];
        };
        /** PatchTemplateContent */
        PatchTemplateContent: {
            /** type */
            type?: components["schemas"]["TemplateTypeEnum"];
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** PatchTemplateResponse */
        PatchTemplateResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default template
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["TemplateFullResponse"];
        };
        /** PatchTracking */
        PatchTracking: {
            /**
             * opens
             * @description Enable the tracking of opens (only available for the HTML version)
             */
            opens?: boolean;
            /**
             * clicks_html
             * @description Enable the tracking of link clicks in the HTML version
             */
            clicks_html?: boolean;
            /**
             * clicks_text
             * @description Enable the tracking of link clicks in the text version
             */
            clicks_text?: boolean;
            /**
             * additional_params
             * @description Append additional tracking parameters on all link (should be URL encoded)
             */
            additional_params?: string;
        };
        /** PatchUser */
        PatchUser: {
            /** first_name */
            first_name?: string;
            /** last_name */
            last_name?: string;
            /** title */
            title?: string;
            /** office_phone */
            office_phone?: string;
            /** mobile_phone */
            mobile_phone?: string;
            /** language */
            language?: components["schemas"]["Languages"];
            /**
             * timezone
             * @description Based on tz database
             */
            timezone?: string;
            /** password */
            password?: components["schemas"]["ChangePassword"];
        };
        /** PatchUserResponse */
        PatchUserResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * patched
             * @default true
             */
            patched: boolean;
            /** data */
            data: components["schemas"]["UserFullResponse"];
        };
        /** PatchWebhook */
        PatchWebhook: {
            /**
             * url
             * Format: uri
             */
            url?: string;
            /** rate_limit */
            rate_limit?: number;
            /** rate_limit_period */
            rate_limit_period?: components["schemas"]["RateLimitPeriod"];
        };
        /** PatchWebhookResponse */
        PatchWebhookResponse: {
            /** id */
            id: string;
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"];
            /**
             * object
             * @default Webhook
             */
            object: string;
            /**
             * patched
             * @default true
             */
            patched: boolean;
        };
        /** PatchWorkflow */
        PatchWorkflow: {
            /** name */
            name?: string;
            /** goal */
            goal?: string;
            /** description */
            description?: string;
            /** trigger */
            trigger?: components["schemas"]["WorkflowTrigger"];
            /** audience */
            audience?: components["schemas"]["WorkflowAudience"];
            /** blueprint */
            blueprint?: components["schemas"]["WorkflowFromBlueprint"];
        };
        /** PatchWorkflowResponse */
        PatchWorkflowResponse: {
            /** data */
            data: components["schemas"]["WorkflowResponse"];
            /** id */
            id: string;
            /**
             * object
             * @default workflow
             */
            object: string;
            /**
             * patched
             * @default true
             */
            patched: boolean;
        };
        /** PutSystemEmailsResponse */
        PutSystemEmailsResponse: {
            /**
             * object
             * @default systememails
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["SystemEmailsTemplates"];
        };
        /**
         * RateLimitPeriod
         * @description An enumeration.
         * @enum {string}
         */
        RateLimitPeriod: "second" | "minute";
        /** RecoveryCodesResponse */
        RecoveryCodesResponse: {
            /** data */
            data: string[];
        };
        /** Redirections */
        Redirections: {
            /**
             * after_opt_in
             * Format: uri
             * @description Redirection after Opt In
             */
            after_opt_in?: string;
            /**
             * after_double_opt_in
             * Format: uri
             * @description Redirection after Double Opt In
             */
            after_double_opt_in?: string;
            /**
             * after_opt_out
             * Format: uri
             * @description Redirection after Opt Out
             */
            after_opt_out?: string;
        };
        /**
         * grant_type
         * @description An enumeration.
         * @enum {string}
         */
        RefreshGrantType: "refresh_token";
        /** RelayGroupId */
        RelayGroupId: {
            /** id */
            id: number;
            /** description */
            description?: string;
        };
        /** RemoveInterestsFromContacts */
        RemoveInterestsFromContacts: {
            /** interests */
            interests: string[];
            /** contact_ids */
            contact_ids?: number[];
            /** query */
            query?: string;
            /** fiql */
            fiql?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** RemoveInterestsFromMultipleContactsResponse */
        RemoveInterestsFromMultipleContactsResponse: {
            /**
             * object
             * @default interests
             */
            object: string;
            /**
             * removed
             * @default true
             */
            removed: boolean;
        };
        /** RenderCampaignFullResponse */
        RenderCampaignFullResponse: {
            /** html */
            html?: string;
            /** text */
            text?: string;
        };
        /** RenderCampaignResponse */
        RenderCampaignResponse: {
            /** data */
            data: components["schemas"]["RenderCampaignFullResponse"];
        };
        /** RenderTransactionalEmailTemplate */
        RenderTransactionalEmailTemplate: {
            /** contact_id */
            contact_id: number;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
        };
        /** RequestedByUser */
        RequestedByUser: {
            /**
             * email
             * Format: email
             */
            email: string;
            /** id */
            id: number;
        };
        /** ResendAccountVerificationEmailResponse */
        ResendAccountVerificationEmailResponse: {
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * verification_resent
             * @default true
             */
            verification_resent: boolean;
        };
        /** ResendConfirmationEmailResponse */
        ResendConfirmationEmailResponse: {
            /** id */
            id: string;
            /**
             * resent
             * @default true
             */
            resent: boolean;
            /**
             * object
             * @default sender
             */
            object: string;
        };
        /** ResendUserVerificationEmailResponse */
        ResendUserVerificationEmailResponse: {
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * confirmation_resent
             * @default true
             */
            confirmation_resent: boolean;
        };
        /** ResendVerificationEmail */
        ResendVerificationEmail: {
            /**
             * email
             * Format: email
             */
            email: string;
        };
        /** ResetPasswordConfirm */
        ResetPasswordConfirm: {
            /** token */
            token: string;
            /** password */
            password: string;
        };
        /** ResetPasswordConfirmResponse */
        ResetPasswordConfirmResponse: {
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * password_reset
             * @default true
             */
            password_reset: boolean;
        };
        /** ResetPasswordResponse */
        ResetPasswordResponse: {
            /** email */
            email: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * reset_link_sent
             * @default true
             */
            reset_link_sent: boolean;
        };
        /** ResetUserPassword */
        ResetUserPassword: {
            /**
             * invalidate_current_password
             * @default false
             */
            invalidate_current_password: boolean;
        };
        /** ResumeCampaignResponse */
        ResumeCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * resumed
             * @default true
             */
            resumed: boolean;
        };
        /** ScheduleCampaign */
        ScheduleCampaign: {
            /**
             * date
             * @description A UNIX timestamp in the future
             */
            date?: number;
            /**
             * html_empty
             * @description Required to be true if the html message is empty
             * @default false
             */
            html_empty: boolean;
        };
        /** ScheduleCampaignResponse */
        ScheduleCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * scheduled
             * @default true
             */
            scheduled: boolean;
        };
        /**
         * Scope
         * @description An enumeration.
         * @enum {string}
         */
        Scope: "user" | "admin" | "internal" | "auth";
        /** Segment */
        Segment: {
            /**
             * query
             * @description SQL-like expression (use one of query, fiql and json)
             */
            query?: string;
            /**
             * fiql
             * @description FIQL expression (use one of query, fiql and json)
             */
            fiql?: string;
            /**
             * json
             * @description JSON expression (use one of query, fiql and json)
             */
            json?: Record<string, never>;
            /** name */
            name: string;
        };
        /** SegmentFullResponse */
        SegmentFullResponse: {
            /**
             * id
             * @description Segment id
             */
            id: number;
            /**
             * name
             * @description Segment name
             */
            name: string;
            /**
             * query
             * @description SQL-like expression
             */
            query?: string;
            /**
             * fiql
             * @description FIQL expression
             */
            fiql?: string;
            /**
             * json
             * @description JSON expression
             */
            json?: Record<string, never>;
            /**
             * campaigns_count
             * @description Number of campaigns using this Segment
             */
            campaigns_count: number;
            /**
             * last_used
             * @description Last used date (Unix time)
             */
            last_used: number;
            /**
             * created_on
             * @description Creation date (Unix time)
             */
            created_on: number;
        };
        /** SegmentResponse */
        SegmentResponse: {
            /** data */
            data: components["schemas"]["SegmentFullResponse"];
        };
        /** SegmentsResponse */
        SegmentsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["SegmentFullResponse"][];
        };
        /** SendEmailResponse */
        SendEmailResponse: {
            /** email */
            email: string;
            /**
             * object
             * @default email
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
            /** data */
            data: components["schemas"]["TransactionalEmailResponse"];
        };
        /** SendTestAction */
        SendTestAction: {
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * type
             * @default merged
             */
            type: components["schemas"]["TestEmailType"];
        };
        /** SendTestActionResponse */
        SendTestActionResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default action
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
        };
        /** SendTestEmail */
        SendTestEmail: {
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * type
             * @default merged
             */
            type: components["schemas"]["TestEmailType"];
        };
        /** SendTestEmailResponse */
        SendTestEmailResponse: {
            /**
             * email
             * Format: email
             */
            email: string;
            /** type */
            type: components["schemas"]["TestEmailType"];
            /**
             * object
             * @default test_email
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
        };
        /** SendTestTransactionalEmail */
        SendTestTransactionalEmail: {
            /**
             * email
             * Format: email
             */
            email: string;
        };
        /** SendTestTransactionalEmailTemplateResponse */
        SendTestTransactionalEmailTemplateResponse: {
            /**
             * object
             * @default transactional-email-test
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
        };
        /** SendTransactionalEmailResponse */
        SendTransactionalEmailResponse: {
            /** email */
            email: string;
            /**
             * object
             * @default email
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
            /** data */
            data: components["schemas"]["SentTransactionalEmailResponse"];
        };
        /** SendTransactionalEmailTemplateResponse */
        SendTransactionalEmailTemplateResponse: {
            /** email */
            email: string;
            /**
             * object
             * @default transactional-email-template
             */
            object: string;
            /**
             * sent
             * @default true
             */
            sent: boolean;
            /** data */
            data: components["schemas"]["SentTransactionalEmailResponse"];
        };
        /** SendTransactionalEmailToAddress */
        SendTransactionalEmailToAddress: {
            /** sender */
            sender?: components["schemas"]["SenderAndName"];
            /**
             * custom_attributes
             * @description List of temporary custom attributes, overriding the contact's custom attributes. Note: the custom attributes will not be saved to the contact's profile.
             */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
            /** attachments */
            attachments?: components["schemas"]["Attachment"][];
            /**
             * resubscribe
             * @default false
             */
            resubscribe: boolean;
            /**
             * queue
             * @description Queue ID
             * @default 0
             */
            queue: number;
            /**
             * email
             * Format: email
             */
            email: string;
        };
        /** SendTransactionalEmailToContactId */
        SendTransactionalEmailToContactId: {
            /** sender */
            sender?: components["schemas"]["SenderAndName"];
            /**
             * custom_attributes
             * @description List of temporary custom attributes, overriding the contact's custom attributes. Note: the custom attributes will not be saved to the contact's profile.
             */
            custom_attributes?: components["schemas"]["CustomAttribute"][];
            /** attachments */
            attachments?: components["schemas"]["Attachment"][];
            /**
             * resubscribe
             * @default false
             */
            resubscribe: boolean;
            /**
             * queue
             * @description Queue ID
             * @default 0
             */
            queue: number;
            /** contact_id */
            contact_id: number;
        };
        /** Sender */
        Sender: {
            /** id */
            id: string;
        };
        /** SenderAndName */
        SenderAndName: {
            /** id */
            id: string;
            /** name */
            name?: string;
        };
        /** SenderFullResponse */
        SenderFullResponse: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** email */
            email: string;
            /** confirmed */
            confirmed: boolean;
            /** confirmed_on */
            confirmed_on?: number;
            /**
             * language
             * @default en_US
             */
            language: components["schemas"]["Languages"];
            /** last_confirmation_sent_on */
            last_confirmation_sent_on?: number;
        };
        /** SenderInfo */
        SenderInfo: {
            /** name */
            name?: string;
            /** email */
            email?: string;
        };
        /** SenderResponse */
        SenderResponse: {
            /** data */
            data: components["schemas"]["SenderFullResponse"];
        };
        /** SendersResponse */
        SendersResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["SenderFullResponse"][];
        };
        /** SentTransactionalEmailResponse */
        SentTransactionalEmailResponse: {
            /** contact_id */
            contact_id: number;
        };
        /** ShowSubscriptionFormEndpointResponse */
        ShowSubscriptionFormEndpointResponse: {
            /** data */
            data: components["schemas"]["SubscriptionFormEndpointResponse"];
        };
        /** ShowTransactionalEmailTemplateResponse */
        ShowTransactionalEmailTemplateResponse: {
            /** data */
            data: components["schemas"]["TransactionalEmailTemplateFullResponse"];
        };
        /**
         * SignatureHashFunction
         * @description An enumeration.
         * @enum {string}
         */
        SignatureHashFunction: "sha256";
        /** SignatureInfo */
        SignatureInfo: {
            /** key */
            key?: string;
            /** hash_function */
            hash_function: components["schemas"]["SignatureHashFunction"];
        };
        /** SubmitEmail */
        SubmitEmail: {
            /** sender */
            sender: components["schemas"]["SenderAndName"];
            /** content */
            content: components["schemas"]["EmailAPIEmailContent"];
            /**
             * email
             * Format: email
             * @description Recipient's email address
             */
            email?: string;
            /**
             * list_id
             * @description List ID
             */
            list_id?: number;
            /**
             * contact_id
             * @description Contact ID.
             */
            contact_id?: number;
            /**
             * tags
             * @description List of tags to apply to the email
             */
            tags?: string[];
            /** tracking */
            tracking?: components["schemas"]["EmailTracking"];
            /**
             * additional_headers
             * @description Custom mail headers
             */
            additional_headers?: components["schemas"]["AdditionalEmailHeader"][];
            /** attachment */
            attachment?: components["schemas"]["Attachment"] | components["schemas"]["Attachment"][];
        };
        /**
         * SubmitEmailAPIStatus
         * @description An enumeration.
         * @enum {string}
         */
        SubmitEmailAPIStatus: "queued" | "rejected" | "error";
        /** SubmitEmailResponse */
        SubmitEmailResponse: {
            /** email */
            email: string;
            /**
             * object
             * @default email
             */
            object: string;
            /**
             * submitted
             * @default true
             */
            submitted: boolean;
            /** data */
            data: components["schemas"]["SubmittedEmailResponse"];
        };
        /**
         * SubmitEmailType
         * @description An enumeration.
         * @enum {string}
         */
        SubmitEmailType: "marketing" | "transactional";
        /** SubmittedEmailResponse */
        SubmittedEmailResponse: {
            /**
             * id
             * Format: uuid
             */
            id: string;
            /** status */
            status: components["schemas"]["SubmitEmailAPIStatus"];
        };
        /** SubscriptionFormEndpointResponse */
        SubscriptionFormEndpointResponse: {
            /**
             * id
             * @description Unique identifier for the subscription form endpoint
             */
            id: string;
            /**
             * enabled
             * @description Whether the subscription form is enabled
             */
            enabled: boolean;
            /**
             * name
             * @description Name of the subscription form
             */
            name?: string;
            /**
             * domain
             * @description reCaptcha Domain
             */
            domain?: string;
            /**
             * secret
             * @description reCaptcha Secret key
             */
            secret?: string;
            /**
             * post_redirect_url
             * @description URL to redirect to after form submission
             */
            post_redirect_url?: string;
            /**
             * double_opt_in
             * @description Whether to use double opt-in
             */
            double_opt_in?: boolean;
            /**
             * double_opt_in_redirect_url
             * @description URL to redirect to after double opt-in
             */
            double_opt_in_redirect_url?: string;
            /**
             * submission_url
             * @description URL to submit the form to
             */
            submission_url?: string;
            /**
             * async_processing
             * @description Whether to process the form asynchronously
             */
            async_processing?: boolean;
        };
        /**
         * SubscriptionTypeResponse
         * @description An enumeration.
         * @enum {string}
         */
        SubscriptionTypeResponse: "resubscribe" | "subscription_confirmation";
        /** SuppressedEmail */
        SuppressedEmail: {
            /**
             * email
             * @description Full email, a local part wildcard or a domain wildcard.  Examples: *@hotmail.com, john@*, john@hotmail.com
             */
            email: string;
        };
        /** SuppressedEmailResponse */
        SuppressedEmailResponse: {
            /** email */
            email: string;
            /** source */
            source?: string;
        };
        /** SuppressedEmailsExportResponse */
        SuppressedEmailsExportResponse: {
            /** id */
            id: string;
            /** status */
            status: components["schemas"]["TaskStatus"];
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /**
             * progress
             * @default 0
             */
            progress: number;
            /** requested_by */
            requested_by: components["schemas"]["RequestedByUser"];
            /**
             * type
             * @default suppressedemailsexport
             */
            type: components["schemas"]["TaskType"];
            /** description */
            description?: string;
            /** payload */
            payload: Record<string, never>;
        };
        /** SuppressedEmailsResponse */
        SuppressedEmailsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["SuppressedEmailResponse"][];
        };
        /** SuspendAccountResponse */
        SuspendAccountResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * suspended
             * @default true
             */
            suspended: boolean;
            /** data */
            data: components["schemas"]["AccountSummaryResponse"];
        };
        /** SuspendCampaignResponse */
        SuspendCampaignResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default campaign
             */
            object: string;
            /**
             * suspended
             * @default true
             */
            suspended: boolean;
        };
        /** SuspendUserResponse */
        SuspendUserResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default user
             */
            object: string;
            /**
             * suspended
             * @default true
             */
            suspended: boolean;
            /** data */
            data: components["schemas"]["UserFullResponse"];
        };
        /** SystemEmailTemplate */
        SystemEmailTemplate: {
            /** language */
            language: components["schemas"]["Languages"];
            /** template */
            template?: components["schemas"]["TemplateId"];
            /** sender */
            sender?: components["schemas"]["Sender"];
        };
        /** SystemEmailsResponse */
        SystemEmailsResponse: {
            /** data */
            data: components["schemas"]["SystemEmailsTemplates"];
        };
        /** SystemEmailsTemplates */
        SystemEmailsTemplates: {
            /** account_confirm */
            account_confirm?: components["schemas"]["SystemEmailTemplate"][];
            /** user_confirm */
            user_confirm?: components["schemas"]["SystemEmailTemplate"][];
            /** sender_confirm */
            sender_confirm?: components["schemas"]["SystemEmailTemplate"][];
            /** password_reset */
            password_reset?: components["schemas"]["SystemEmailTemplate"][];
            /** contact_double_opt_in */
            contact_double_opt_in?: components["schemas"]["SystemEmailTemplate"][];
        };
        /** TagContactResponse */
        TagContactResponse: {
            /**
             * tagged
             * @default true
             */
            tagged: boolean;
        };
        /** TagFullResponse */
        TagFullResponse: {
            /** tag */
            tag: string;
        };
        /** TagMultipleContacts */
        TagMultipleContacts: {
            /** tags */
            tags: string[];
            /** contact_ids */
            contact_ids?: number[];
            /**
             * query
             * @description SQL-like expression
             */
            query?: string;
            /** fiql */
            fiql?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** TagMultipleContactsResponse */
        TagMultipleContactsResponse: {
            /**
             * tagged
             * @default true
             */
            tagged: boolean;
        };
        /** TagResponse */
        TagResponse: {
            /** data */
            data: components["schemas"]["TagFullResponse"];
        };
        /** Tags */
        Tags: {
            /** tags */
            tags: string[];
        };
        /** TagsResponse */
        TagsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["TagFullResponse"][];
        };
        /** TaskFullResponse */
        TaskFullResponse: {
            /** id */
            id: string;
            /** status */
            status: components["schemas"]["TaskStatus"];
            /** created_on */
            created_on: number;
            /** expires_on */
            expires_on: number;
            /**
             * progress
             * @default 0
             */
            progress: number;
            /** requested_by */
            requested_by: components["schemas"]["RequestedByUser"];
            /** type */
            type: components["schemas"]["TaskType"];
            /** description */
            description?: string;
            /** payload */
            payload: Record<string, never>;
        };
        /** TaskResponse */
        TaskResponse: {
            /** data */
            data: components["schemas"]["TaskFullResponse"];
        };
        /**
         * TaskStatus
         * @description An enumeration.
         * @enum {string}
         */
        TaskStatus: "pending" | "ready" | "error" | "deleted";
        /**
         * TaskType
         * @description An enumeration.
         * @enum {string}
         */
        TaskType: "contactsexport" | "campaignlogexport" | "campaignsreportsexport" | "suppressedemailsexport" | "listlogsexport" | "unknown";
        /** TemplateContent */
        TemplateContent: {
            /** type */
            type: components["schemas"]["TemplateTypeEnum"];
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** TemplateContentResponse */
        TemplateContentResponse: {
            /** type */
            type: components["schemas"]["TemplateTypeEnum"];
            /** subject */
            subject?: string;
            /** html */
            html?: string;
            /** text */
            text?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** TemplateCreate */
        TemplateCreate: {
            /** name */
            name: string;
            /** description */
            description?: string;
            /** content */
            content: components["schemas"]["TemplateContent"];
            /** tags */
            tags?: string[];
        };
        /** TemplateCreated */
        TemplateCreated: {
            /** id */
            id: number;
            /**
             * object
             * @default template
             */
            object: string;
            /**
             * created
             * @default true
             */
            created: boolean;
        };
        /** TemplateCustomAttributes */
        TemplateCustomAttributes: {
            /** name */
            name: string;
            /** value */
            value: string;
        };
        /** TemplateFullResponse */
        TemplateFullResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** description */
            description?: string;
            /** created_on */
            created_on: number;
            /** updated_on */
            updated_on: number;
            /** tags */
            tags?: string[];
            /** is_owner */
            is_owner?: boolean;
            /** sharing */
            sharing?: components["schemas"]["TemplateSharing"];
            /**
             * thumbnail
             * @deprecated
             */
            thumbnail?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
            /** content */
            content: components["schemas"]["TemplateContentResponse"];
        };
        /** template */
        TemplateId: {
            /** id */
            id: number;
        };
        /** template */
        TemplateInfo: {
            /** id */
            id: number;
            /** custom_attributes */
            custom_attributes?: components["schemas"]["TemplateCustomAttributes"][];
        };
        /** TemplateResponse */
        TemplateResponse: {
            /** data */
            data: components["schemas"]["TemplateFullResponse"];
        };
        /** TemplateSharing */
        TemplateSharing: {
            /** shared */
            shared?: boolean;
            /** accounts */
            accounts?: components["schemas"]["TemplateVisibilityResponse"][];
            /** automatic */
            automatic?: boolean;
        };
        /** TemplateSharingSummaryResponse */
        TemplateSharingSummaryResponse: {
            /** shared */
            shared?: boolean;
        };
        /** TemplateSummaryResponse */
        TemplateSummaryResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** description */
            description?: string;
            /** created_on */
            created_on: number;
            /** updated_on */
            updated_on: number;
            /** tags */
            tags?: string[];
            /** is_owner */
            is_owner?: boolean;
            /** sharing */
            sharing?: components["schemas"]["TemplateSharingSummaryResponse"];
            /**
             * thumbnail
             * @deprecated
             */
            thumbnail?: string;
            /** thumbnail_url */
            thumbnail_url?: string;
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        TemplateTypeEnum: "html" | "text" | "bee" | "custom";
        /** TemplateVisibilityResponse */
        TemplateVisibilityResponse: {
            /** account_id */
            account_id: number;
            /** visible */
            visible: boolean;
            /** company_name */
            company_name?: string;
        };
        /** TemplatesResponse */
        TemplatesResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["TemplateSummaryResponse"][];
        };
        /**
         * type
         * @description An enumeration.
         * @enum {string}
         */
        TestEmailType: "merged" | "separated";
        /** TokenResponse */
        TokenResponse: {
            /** access_token */
            access_token: string;
            /** token_type */
            token_type: string;
            /** expires_in */
            expires_in: number;
            /** refresh_token */
            refresh_token: string;
            /** accounts */
            accounts: number[];
        };
        /** Tracking */
        Tracking: {
            /**
             * opens
             * @description Enable the tracking of opens (only available for the HTML version)
             * @default true
             */
            opens: boolean;
            /**
             * clicks_html
             * @description Enable the tracking of link clicks in the HTML version
             * @default true
             */
            clicks_html: boolean;
            /**
             * clicks_text
             * @description Enable the tracking of link clicks in the text version
             * @default true
             */
            clicks_text: boolean;
            /**
             * additional_params
             * @description Append additional tracking parameters on all link (should be URL encoded)
             */
            additional_params?: string;
        };
        /** TrackingResponse */
        TrackingResponse: {
            /** opens */
            opens?: boolean;
            /** clicks_html */
            clicks_html?: boolean;
            /** clicks_text */
            clicks_text?: boolean;
            /** additional_params */
            additional_params?: string;
        };
        /** TransactionalEmailResponse */
        TransactionalEmailResponse: {
            /** id */
            id: number;
        };
        /** TransactionalEmailTemplateContent */
        TransactionalEmailTemplateContent: {
            /** type */
            type: components["schemas"]["ContentType"];
            /** subject */
            subject: string;
            /** json */
            json?: Record<string, never>;
            /** html */
            html?: string;
        };
        /** TransactionalEmailTemplateContentSummaryResponse */
        TransactionalEmailTemplateContentSummaryResponse: {
            /** subject */
            subject?: string;
            /** type */
            type: components["schemas"]["ContentType"];
        };
        /** TransactionalEmailTemplateFullResponse */
        TransactionalEmailTemplateFullResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** status */
            status: string;
            /** created_on */
            created_on: number;
            /** updated_on */
            updated_on?: number;
            /** cc */
            cc?: string[];
            /** reply_to */
            reply_to?: string;
            /** sender */
            sender: components["schemas"]["SenderInfo"];
            /** content */
            content: components["schemas"]["TransactionalEmailTemplateContent"];
            /** thumbnail_url */
            thumbnail_url: string;
        };
        /** TransactionalEmailTemplateSummaryResponse */
        TransactionalEmailTemplateSummaryResponse: {
            /** id */
            id: number;
            /** name */
            name: string;
            /** status */
            status: string;
            /** created_on */
            created_on: number;
            /** sender */
            sender: components["schemas"]["SenderInfo"];
            /** content */
            content: components["schemas"]["TransactionalEmailTemplateContentSummaryResponse"];
            /** thumbnail_url */
            thumbnail_url: string;
        };
        /** TransactionalEmailTemplateTracking */
        TransactionalEmailTemplateTracking: {
            /**
             * additional_params
             * @description Append additional tracking parameters on all links (should be URL encoded)
             */
            additional_params?: string;
        };
        /** UnArchiveWebhookResponse */
        UnArchiveWebhookResponse: {
            /** id */
            id: string;
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"];
            /**
             * object
             * @default Webhook
             */
            object: string;
            /**
             * archived
             * @default false
             */
            archived: boolean;
        };
        /** UnauthorizedMessage */
        UnauthorizedMessage: {
            /** code */
            code?: number;
            /** msg */
            msg: string;
            /**
             * type
             * @default unauthorized
             */
            type: string;
        };
        /** UnlockWorkflow */
        UnlockWorkflow: {
            /** key */
            key: string;
        };
        /** UnlockWorkflowResponse */
        UnlockWorkflowResponse: {
            /**
             * object
             * @default workflow
             */
            object: string;
            /** locked */
            locked: boolean;
            /** expires_in */
            expires_in: number;
        };
        /** UnsubscribeContactResponse */
        UnsubscribeContactResponse: {
            /**
             * object
             * @default contact
             */
            object: string;
            /**
             * subscribed
             * @default false
             */
            subscribed: boolean;
            /** data */
            data: components["schemas"]["ContactFullResponse"];
        };
        /** UnsuspendAccountResponse */
        UnsuspendAccountResponse: {
            /** id */
            id: string;
            /**
             * object
             * @default account
             */
            object: string;
            /**
             * unsuspended
             * @default true
             */
            unsuspended: boolean;
            /** data */
            data: components["schemas"]["AccountSummaryResponse"];
        };
        /** UntagContactResponse */
        UntagContactResponse: {
            /**
             * untagged
             * @default true
             */
            untagged: boolean;
        };
        /** UntagMultipleContacts */
        UntagMultipleContacts: {
            /** tags */
            tags: string[];
            /** contact_ids */
            contact_ids?: number[];
            /**
             * query
             * @description SQL-like expression
             */
            query?: string;
            /** fiql */
            fiql?: string;
            /** json */
            json?: Record<string, never>;
        };
        /** UntagMultipleContactsResponse */
        UntagMultipleContactsResponse: {
            /**
             * untagged
             * @default true
             */
            untagged: boolean;
        };
        /** UpdateList */
        UpdateList: {
            /** name */
            name?: string;
            /** default_sender */
            default_sender?: components["schemas"]["Sender"];
            /** language */
            language?: components["schemas"]["Languages"];
            /**
             * redirections
             * @default {}
             */
            redirections: components["schemas"]["Redirections"];
            /**
             * webhook
             * @default {}
             */
            webhook: components["schemas"]["api__schemas__requests__lists__Webhook"];
        };
        /** UpdateSegment */
        UpdateSegment: {
            /**
             * query
             * @description SQL-like expression (use one of query, fiql and json)
             */
            query?: string;
            /**
             * fiql
             * @description FIQL expression (use one of query, fiql and json)
             */
            fiql?: string;
            /**
             * json
             * @description JSON expression (use one of query, fiql and json)
             */
            json?: Record<string, never>;
            /**
             * name
             * @description Segment Name
             */
            name?: string;
        };
        /** UpdateSender */
        UpdateSender: {
            /** name */
            name?: string;
            /** language */
            language?: components["schemas"]["Languages"];
        };
        /** UpdateTransactionalEmailFromTemplate */
        UpdateTransactionalEmailFromTemplate: {
            /** subject */
            subject?: string;
            /** template_id */
            template_id: number;
        };
        /** UpdateTransactionalEmailTemplate */
        UpdateTransactionalEmailTemplate: {
            /** name */
            name?: string;
            /** sender */
            sender?: components["schemas"]["Sender"];
            /**
             * reply_to
             * Format: email
             */
            reply_to?: string;
            /** cc */
            cc?: string[];
            /** content */
            content?: components["schemas"]["UpdateTransactionalEmailTemplateTemplateContent"] | components["schemas"]["UpdateTransactionalEmailFromTemplate"];
            /** tracking */
            tracking?: components["schemas"]["TransactionalEmailTemplateTracking"];
        };
        /** UpdateTransactionalEmailTemplateResponse */
        UpdateTransactionalEmailTemplateResponse: {
            /** id */
            id: number;
            /**
             * object
             * @default transactional-email-template
             */
            object: string;
            /**
             * updated
             * @default true
             */
            updated: boolean;
            /** data */
            data: components["schemas"]["TransactionalEmailTemplateFullResponse"];
        };
        /** UpdateTransactionalEmailTemplateTemplateContent */
        UpdateTransactionalEmailTemplateTemplateContent: {
            /** type */
            type?: components["schemas"]["ContentType"];
            /** subject */
            subject: string;
            /** json */
            json?: Record<string, never>;
            /** html */
            html?: string;
        };
        /** UploadLogo */
        UploadLogo: {
            /**
             * file
             * @description Data URI scheme, base64 encoded
             */
            file: string;
        };
        /** UploadLogoResponse */
        UploadLogoResponse: {
            /** logo */
            logo: string;
            /**
             * object
             * @default logo
             */
            object: string;
            /**
             * uploaded
             * @default true
             */
            uploaded: boolean;
        };
        /** UsageLimits */
        UsageLimits: {
            /** starts_on */
            starts_on?: number;
            /** per_campaign */
            per_campaign?: number;
            /** per_month */
            per_month?: number;
            /** maximum_contacts */
            maximum_contacts?: number;
            /** lists */
            lists?: number;
            /** users */
            users?: number;
            /** campaign_blueprints */
            campaign_blueprints?: number;
            /** automation_conditions */
            automation_conditions?: number;
            /** use_campaign_blueprints */
            use_campaign_blueprints?: boolean;
            /** use_automation_conditions */
            use_automation_conditions?: boolean;
            /** use_automations */
            use_automations?: boolean;
            /** use_automation_customwebhooks */
            use_automation_customwebhooks?: boolean;
            /** use_html_editor */
            use_html_editor?: boolean;
            /** use_contact_export */
            use_contact_export?: boolean;
            /** use_custom_merge_tags */
            use_custom_merge_tags?: boolean;
            /** use_list_redirection */
            use_list_redirection?: boolean;
            /** use_behavioral_segmentation */
            use_behavioral_segmentation?: boolean;
            /** use_ab_split */
            use_ab_split?: boolean;
            /** use_smart_email_resource */
            use_smart_email_resource?: boolean;
            /** use_smart_blueprint */
            use_smart_blueprint?: boolean;
            /** use_brand */
            use_brand?: boolean;
            /** use_email_api */
            use_email_api?: boolean;
            /** insert_reseller_logo */
            insert_reseller_logo?: boolean;
            /** use_tags_in_automation */
            use_tags_in_automation?: boolean;
            /** use_tags */
            use_tags?: boolean;
        };
        /** UsageLimitsResponse */
        UsageLimitsResponse: {
            /** starts_on */
            starts_on?: number;
            /** per_campaign */
            per_campaign?: number;
            /** per_month */
            per_month?: number;
            /** remaining */
            remaining?: number;
            /** maximum_contacts */
            maximum_contacts?: number;
            /** lists */
            lists?: number;
            /** users */
            users?: number;
            /** campaign_blueprints */
            campaign_blueprints?: number;
            /** automation_conditions */
            automation_conditions?: number;
            /** use_ab_split */
            use_ab_split?: boolean;
            /** use_automation_conditions */
            use_automation_conditions?: boolean;
            /** use_automations */
            use_automations?: boolean;
            /** use_automation_customwebhooks */
            use_automation_customwebhooks?: boolean;
            /** use_behavioral_segmentation */
            use_behavioral_segmentation?: boolean;
            /** use_brand */
            use_brand?: boolean;
            /** use_campaign_blueprints */
            use_campaign_blueprints?: boolean;
            /** use_contact_export */
            use_contact_export?: boolean;
            /** use_custom_merge_tags */
            use_custom_merge_tags?: boolean;
            /** use_email_api */
            use_email_api?: boolean;
            /** use_html_editor */
            use_html_editor?: boolean;
            /** use_list_redirection */
            use_list_redirection?: boolean;
            /** use_smart_email_resource */
            use_smart_email_resource?: boolean;
            /** use_smart_blueprint */
            use_smart_blueprint?: boolean;
            /** use_tags_in_automation */
            use_tags_in_automation?: boolean;
            /** use_tags */
            use_tags?: boolean;
            /** insert_reseller_logo */
            insert_reseller_logo?: boolean;
        };
        /** User */
        User: {
            /** first_name */
            first_name: string;
            /** last_name */
            last_name: string;
            /** title */
            title?: string;
            /** office_phone */
            office_phone?: string;
            /** mobile_phone */
            mobile_phone?: string;
            /** language */
            language?: components["schemas"]["Languages"];
            /**
             * timezone
             * @description Based on tz database
             */
            timezone?: string;
            /** password */
            password?: string;
            /**
             * email
             * Format: email
             */
            email: string;
            /**
             * password_strength_requirement
             * @default VERY_WEAK
             */
            password_strength_requirement: components["schemas"]["PasswordStrengthRequirement"];
        };
        /** UserConfirmation */
        UserConfirmation: {
            /** confirmation */
            confirmation: string;
            /** password */
            password: string;
        };
        /** UserFullResponse */
        UserFullResponse: {
            /** id */
            id: string;
            /** email */
            email: string;
            /** status */
            status: string;
            /** created_on */
            created_on?: number;
            /** last_activity_on */
            last_activity_on?: number;
            /** expires_on */
            expires_on?: number;
            /** first_name */
            first_name?: string;
            /** last_name */
            last_name?: string;
            /** title */
            title?: string;
            /** language */
            language?: components["schemas"]["Languages"];
            /** timezone */
            timezone?: string;
            /** office_phone */
            office_phone?: string;
            /** mobile_phone */
            mobile_phone?: string;
        };
        /** UserInfo */
        UserInfo: {
            /** ip */
            ip?: string;
            /** os */
            os: components["schemas"]["OperatingSystemInfo"];
            /** browser */
            browser: components["schemas"]["BrowserInfo"];
            /** device */
            device: components["schemas"]["DeviceInfo"];
            /** is_bot */
            is_bot?: boolean;
            /** raw */
            raw?: string;
        };
        /** UserResponse */
        UserResponse: {
            /** data */
            data: components["schemas"]["UserFullResponse"];
        };
        /** UserSummaryResponse */
        UserSummaryResponse: {
            /** id */
            id: string;
            /** email */
            email: string;
            /** status */
            status?: string;
            /** first_name */
            first_name?: string;
            /** last_name */
            last_name?: string;
            /** last_activity_on */
            last_activity_on?: number;
            /** created_on */
            created_on?: number;
            /** expires_on */
            expires_on?: number;
        };
        /** UsersResponse */
        UsersResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["UserSummaryResponse"][];
        };
        /** ValidateDomainsResponse */
        ValidateDomainsResponse: {
            /** data */
            data: components["schemas"]["DomainsInstructionResponse"];
        };
        /** ValidationError */
        ValidationError: {
            /** loc */
            loc: (string | number)[];
            /** msg */
            msg: string;
            /** type */
            type: string;
        };
        /** WebhookResponse */
        WebhookResponse: {
            /** id */
            id: string;
            /** signature */
            signature: components["schemas"]["SignatureInfo"];
            /** data */
            data: components["schemas"]["api__services__webhooks__schemas__Webhook"];
        };
        /**
         * WebhookStatus
         * @description An enumeration.
         * @enum {string}
         */
        WebhookStatus: "active" | "archived";
        /** Workflow */
        Workflow: {
            /** name */
            name?: string;
            /** goal */
            goal?: string;
            /** description */
            description?: string;
            /**
             * trigger
             * @default subscribed
             */
            trigger: components["schemas"]["WorkflowTrigger"];
            /** audience */
            audience: components["schemas"]["WorkflowAudience"];
            /** blueprint */
            blueprint?: components["schemas"]["WorkflowFromBlueprint"];
        };
        /** WorkflowAudience */
        WorkflowAudience: {
            /** list_id */
            list_id: number;
            /** segment_id */
            segment_id?: number;
        };
        /** WorkflowBlueprint */
        WorkflowBlueprint: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** description */
            description?: string;
            /** goal */
            goal: string;
            /** trigger */
            trigger?: components["schemas"]["WorkflowTrigger"];
            /** created_on */
            created_on?: number;
            /** updated_on */
            updated_on?: number;
        };
        /** WorkflowBlueprintActionResponse */
        WorkflowBlueprintActionResponse: {
            /** data */
            data: components["schemas"]["ActionBlueprint"];
        };
        /** WorkflowBlueprintResponse */
        WorkflowBlueprintResponse: {
            /** data */
            data: components["schemas"]["WorkflowBlueprint"];
        };
        /** WorkflowBlueprintsResponse */
        WorkflowBlueprintsResponse: {
            /** pagination */
            pagination: components["schemas"]["Pagination"];
            /** data */
            data: components["schemas"]["WorkflowBlueprint"][];
        };
        /** WorkflowFromBlueprint */
        WorkflowFromBlueprint: {
            /** id */
            id: string;
            /** email_settings */
            email_settings?: components["schemas"]["ActionDefaultEmailSettings"];
        };
        /** WorkflowResponse */
        WorkflowResponse: {
            /** id */
            id: string;
            /** name */
            name?: string;
            /** description */
            description?: string;
            /** goal */
            goal?: string;
            /** status */
            status?: components["schemas"]["WorkflowStatus"];
            /** trigger */
            trigger?: components["schemas"]["WorkflowTrigger"];
            /** audience */
            audience?: components["schemas"]["WorkflowAudience"];
            /** created_on */
            created_on?: number;
            /** updated_on */
            updated_on?: number;
            /** activated_on */
            activated_on?: number;
        };
        /**
         * status
         * @description An enumeration.
         * @enum {string}
         */
        WorkflowStatus: "active" | "inactive";
        /**
         * trigger
         * @description An enumeration.
         * @enum {string}
         */
        WorkflowTrigger: "subscribed" | "unsubscribed" | "manual";
        /** Webhook */
        api__schemas__requests__lists__Webhook: {
            /**
             * url
             * Format: uri
             */
            url?: string;
            /** actions */
            actions?: components["schemas"]["ListWebhookAction"][];
        };
        /** Webhook */
        api__services__webhooks__schemas__Webhook: {
            /** id */
            id?: string;
            /** status */
            status?: components["schemas"]["WebhookStatus"];
            /** event */
            event?: components["schemas"]["EventType"];
            /**
             * url
             * Format: uri
             */
            url?: string;
            /** archived_at */
            archived_at?: number;
            /** rate_limit */
            rate_limit?: number;
            /** rate_limit_period */
            rate_limit_period?: components["schemas"]["RateLimitPeriod"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getSelfAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
        };
    };
    patchSelfAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchSelfAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    convertSelfAccountToOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
        };
    };
    listActions: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `created_on` */
                sort?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createAction: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Action"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getAction: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteAction: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                action_id: string;
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchAction: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                action_id: string;
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchAction"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderAction: {
        parameters: {
            query?: {
                contact_id?: number;
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sendTestAction: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendTestAction"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendTestActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listCampaigns: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `name`
                 *       - `type`
                 *       - `list_id`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `created_on`
                 *       - `scheduled_for`
                 *       - `scheduled_on`
                 *       - `updated_on`
                 *       - `type` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampaign"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaign: {
        parameters: {
            query?: {
                revision_id?: number;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCampaign"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderCampaign: {
        parameters: {
            query?: {
                contact_id?: number;
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RenderCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sendTestEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendTestEmail"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendTestEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    scheduleCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScheduleCampaign"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unscheduleCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rescheduleCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScheduleCampaign"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suspendCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuspendCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resumeCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumeCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancelCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    archiveCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchiveCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unarchiveCampaign: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchiveCampaignResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignRevisions: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignRevisionsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listCampaignBlueprints: {
        parameters: {
            query?: {
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `tag`
                 *       - `name`
                 *       - `is_owner`
                 *       - `is_not_owner`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `created_on`
                 *       - `updated_on`
                 *       - `name` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignBlueprintsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignBlueprint: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                blueprint_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignBlueprintResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderCampaignBlueprint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blueprint_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    addInterestsToContacts: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddInterestsToContacts"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddInterestsToMultipleContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listContactsOfList: {
        parameters: {
            query?: {
                /** @description SQL selection query (only use one of query, fiql and json) */
                query?: string;
                /** @description JSON selection expression (only use one of query, fiql and json) */
                json?: string;
                /** @description Cursor pagination */
                cursor?: string;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `email`
                 *       - `status`
                 *       - `subscribed_on`
                 *       - `last_bounce_type`
                 *       - `bounces_count` */
                sort?: string;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `email`
                 *       - `tags`
                 *       - `interests`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                fiql?: string;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createContact: {
        parameters: {
            query?: {
                send_double_opt_in?: components["schemas"]["DoubleOptIn"];
                resubscribe?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Contact"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listContactsOfSegment: {
        parameters: {
            query?: {
                /** @description SQL selection query (only use one of query, fiql and json) */
                query?: string;
                /** @description JSON selection expression (only use one of query, fiql and json) */
                json?: string;
                /** @description Cursor pagination */
                cursor?: string;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `email`
                 *       - `status`
                 *       - `subscribed_on`
                 *       - `last_bounce_type`
                 *       - `bounces_count` */
                sort?: string;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `email`
                 *       - `tags`
                 *       - `interests`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                fiql?: string;
            };
            header?: never;
            path: {
                segment_id: number;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    tagMultipleContacts: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagMultipleContacts"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagMultipleContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    untagMultipleContacts: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UntagMultipleContacts"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UntagMultipleContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchContact"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    importContacts: {
        parameters: {
            query?: {
                send_double_opt_in?: components["schemas"]["DoubleOptIn"];
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImportContacts"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unsubscribeContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnsubscribeContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    tagContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tags"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    untagContact: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                contact_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tags"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UntagContactResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    removeInterestsFromContacts: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveInterestsFromContacts"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RemoveInterestsFromMultipleContactsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listCustomAttributes: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomAttributesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createCustomAttribute: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomAttribute"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateAttributeResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCustomAttribute: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomAttributeResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteCustomAttribute: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                /** @description Cannot be one of the reserved terms: id, email, status, registered, bounce_type, bounce_count, tags, _tags */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCustomAttributeResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_dkim_keys_brands_default_dkim_get: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DkimKeysResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_dkim_key_brands_default_dkim_post: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDkim"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDkimResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dkim_key_brands_default_dkim__id__get: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DkimKeyResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_dkim_key_brands_default_dkim__id__delete: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDkimKeyResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showDomains: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchDomains: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchDomains"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchDomainsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validateDomains: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateDomainsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sendEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Email"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getEmailsStats: {
        parameters: {
            query: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Start time for the report. */
                start_time: number;
                /** @description End time for the report. */
                end_time: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getEmailLogs: {
        parameters: {
            query: {
                log_type: components["schemas"]["LogType"];
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Start time for the report. */
                start_time?: number;
                /** @description End time for the report. */
                end_time?: number;
                /** @description Valid Terms:
                 *       - `group_id`
                 *       - `email`
                 *       - `email_id`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailLogsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listEmailGroupIds: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEmailGroupIdsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchEmailGroupId: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the group to edit */
                group_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchEmailGroupId"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchEmailGroupIdResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submitEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitEmail"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                email_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderEmail: {
        parameters: {
            query?: {
                /** @description Render the original submitted content of the email */
                as_submitted?: boolean;
                /** @description Enable tracking */
                tracking?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                email_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listEmailTags: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Tag name to filter by, with optional operator.
                 *
                 *     #### Operators:
                 *     ==: Exact match (default)
                 *     !=: Not equal
                 *     ~~: Like (anywhere in the email)
                 *     !~: Not like (anywhere in the email)
                 *      */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEmailTagsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getEmailAPILogs: {
        parameters: {
            query?: {
                log_type?: components["schemas"]["LogTypeV2"];
                email_id?: string;
                /** @description Convert timestamps to human readable ISO format */
                iso_time?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Start time for the report, defaults to 7 days ago. */
                start_time?: number;
                /** @description End time for the report, defaults to the current time. */
                end_time?: number;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                tags?: string;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                providers?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `time`
                 *       - `submitted_time`
                 *       - `type`
                 *       - `provider` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailAPILogsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getEmailAPISummary: {
        parameters: {
            query?: {
                email_id?: string;
                engagement?: components["schemas"]["EmailAPISummaryEngagementEnum"];
                status?: components["schemas"]["EmailAPISummaryStatus"];
                /** @description Convert timestamps to human readable ISO format */
                iso_time?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Start time for the report, defaults to 7 days ago. */
                start_time?: number;
                /** @description End time for the report, defaults to the current time. */
                end_time?: number;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                tags?: string;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                providers?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `submitted_time` */
                sort?: string;
                /** @description Email address to filter by, with optional operator.
                 *
                 *     #### Operators:
                 *     ==: Exact match (default)
                 *     !=: Not equal
                 *     ~~: Like (anywhere in the email)
                 *     !~: Not like (anywhere in the email)
                 *      */
                email?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailAPISummaryResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getEmailAPIStats: {
        parameters: {
            query?: {
                interval?: components["schemas"]["IntervalEnum"];
                /** @description Convert timestamps to human readable ISO format */
                iso_time?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Start time for the report. */
                start_time?: number;
                /** @description End time for the report. */
                end_time?: number;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                providers?: string;
                /** @description ### Recursive Filter Query Language
                 *
                 *     The filter is a JSON object that represents a recursive query structure. It uses the logical operators `and`, `or`, `not` and `is` as keys, with the following types of values:
                 *
                 *     1. **`object`**: A nested filter object that defines additional conditions.
                 *
                 *     2. **`string`**: A condition expressed as a single string.
                 *
                 *     3. **`array`**: An array of strings (conditions) or nested filter objects.
                 *
                 *
                 *     - The `and` and `or` operators accept `object` and `array`
                 *
                 *     - The `not` operator accepts `object` and `string`
                 *
                 *     - The `is` operator accepts `object` and `string`
                 *
                 *     ### Examples
                 *
                 *     #### 1. Simple condition with a string
                 *
                 *     ```json
                 *     { "is": "condition1" }
                 *      ```
                 *
                 *      #### 2. Array of strings
                 *
                 *     ```json
                 *     { "or": ["condition1", "condition2"] }
                 *     ```
                 *
                 *     #### 3. Nested filter object
                 *
                 *     ```json
                 *     { "not": { "and": ["condition1", "condition2"] } }
                 *     ```
                 *
                 *     #### 4. Complex recursive query
                 *
                 *     ```json
                 *     { "and": [ { "or": ["condition1", "condition2"] }, { "not": { "and": ["condition3", "condition4"] } } ] }
                 *     ```
                 *
                 *      */
                tags?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailAPIStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listTransactionalEmailTemplates: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createTransactionalEmailTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTransactionalEmailTemplate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showTransactionalEmailTemplate: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteTransactionalEmailTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    updateTransactionalEmailTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTransactionalEmailTemplate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sendTransactionalEmail: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendTransactionalEmailToContactId"] | components["schemas"]["SendTransactionalEmailToAddress"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendTransactionalEmailTemplateResponse"] | components["schemas"]["SendTransactionalEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sendTestTransactionalEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendTestTransactionalEmail"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendTestTransactionalEmailTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderTransactionalEmailTemplate: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                transactional_email_template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenderTransactionalEmailTemplate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listForms: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `language`
                 *       - `created_on`
                 *       - `last_updated_on`
                 *       - `list_id`
                 *       - `status` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createForm: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateFormResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getForm: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteForm: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteFormResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchForm: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchFormResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getLink: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                link_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listLinks: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinksResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listActionLinks: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                action_id: string;
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinksResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listLists: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `name`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `created_on` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createList: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["List"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getList: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteList: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchList: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    acceptListPolicy: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcceptListPolicyResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    archiveList: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchiveListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enableSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnableSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disableSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisableSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listSubscriptionFormEndpoints: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionFormEndpointRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShowSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchSubscriptionFormEndpoint: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                form_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchSubscriptionFormEndpointRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchSubscriptionFormEndpointResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listContactsExports: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `status`
                 *       - `created_on`
                 *       - `expires_on` */
                sort?: string;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `progress`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsExportsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    exportContacts: {
        parameters: {
            query?: {
                description?: string;
                query?: string;
                json?: string;
                segment_id?: number;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `email`
                 *       - `tags`
                 *       - `interests`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                fiql?: string;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateContactsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getContactsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteContactsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsExportDeleteResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    downloadContactsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadContactsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getListLogs: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `additional_info`
                 *       - `contact_id`
                 *       - `email`
                 *       - `uniques`
                 *       - `group_by_contact`
                 *       - `track_id`
                 *       - `log_id`
                 *       - `start_id`
                 *       - `end_id`
                 *       - `totals`
                 *       - `type`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLogsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignLogs: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
                cursor?: string;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `additional_info`
                 *       - `link_id`
                 *       - `contact_id`
                 *       - `email`
                 *       - `uniques`
                 *       - `group_by_contact`
                 *       - `log_id`
                 *       - `totals`
                 *       - `type`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `time`
                 *       - `log_id` */
                sort?: string;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignLogsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getActionLogs: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `additional_info`
                 *       - `link_id`
                 *       - `contact_id`
                 *       - `email`
                 *       - `log_id`
                 *       - `track_id`
                 *       - `type`
                 *       - `group_by_contact`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `time`
                 *       - `log_id` */
                sort?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionLogsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listCampaignLogExports: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignLogExportsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    campaignLogExportCreate: {
        parameters: {
            query?: {
                /** @deprecated */
                description?: string;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /**
                 * @deprecated
                 * @description Valid Terms:
                 *       - `additional_info`
                 *       - `link_id`
                 *       - `contact_id`
                 *       - `email`
                 *       - `uniques`
                 *       - `group_by_contact`
                 *       - `log_id`
                 *       - `totals`
                 *       - `type`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;`
                 */
                filter?: string;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateCampaignLogExportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCampaignLogExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    campaignLogExportDownload: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_log_export_id: string;
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadCampaignLogExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listListLogsExports: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLogsExportsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listLogsExportCreate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateListLogsExportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateListLogsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listLogsExportDownload: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_logs_export_id: string;
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadListLogsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    uploadDefaultLogo: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadLogo"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadLogoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteDefaultLogo: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteLogoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listSegments: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `name`
                 *       - `created_on` */
                sort?: string;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SegmentsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createSegment: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Segment"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSegmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getSegment: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                segment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SegmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteSegment: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                segment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSegmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchSegment: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                segment_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSegment"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchSegmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listSenders: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `email`
                 *       - `confirmed` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendersResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createSender: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSender"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSenderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getSender: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                sender_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SenderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteSender: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                sender_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSenderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchSender: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                sender_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSender"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchSenderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirmSender: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmSender"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmSenderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resendConfirmationEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                sender_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResendConfirmationEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listInterests: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InterestsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createInterest: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InterestCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InterestCreatedResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getInterest: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                interest_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InterestResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteInterest: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                interest_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InterestDeletedResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchInterest: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
                interest_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InterestPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InterestPatchedResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listTasks: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `status`
                 *       - `created_on`
                 *       - `expires_on` */
                sort?: string;
                /** @description Valid Terms:
                 *       - `type`
                 *       - `status`
                 *       - `list_id`
                 *       - `progress`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTasksResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getTask: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteTask: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listTemplates: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `tag`
                 *       - `name`
                 *       - `is_owner`
                 *       - `is_not_owner`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `id`
                 *       - `created_on`
                 *       - `updated_on`
                 *       - `name` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplatesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TemplateCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateCreated"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchTemplate: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchTemplate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchTemplateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renderTemplate: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getListStats: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignStats: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignLinksStats: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `unique`
                 *       - `total`
                 *       - `link` */
                sort?: string;
            };
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignLinksStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getSelfAccountStats: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getAccountStats: {
        parameters: {
            query?: {
                start_time?: number;
                end_time?: number;
            };
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getActionStats: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                workflow_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listCampaignsReportsExports: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `status`
                 *       - `progress`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCampaignsReportsExportsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createCampaignsReportsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampaignReportExport"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCampaignsReportsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getCampaignsReportsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCampaignsReportsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteCampaignsReportsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCampaignsReportsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    downloadCampaignsReportsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadCampaignsReportsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listSuppressedEmails: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `email`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuppressedEmailsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createSuppressedEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SuppressedEmail"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSuppressedEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteSuppressedEmail: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                /** @description Full email, a local part wildcard or a domain wildcard. Examples: *@domain.com, john@*, john@domain.com */
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSuppressedEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listSuppressedEmailsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSuppressedEmailsExportsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createSuppressedEmailsExport: {
        parameters: {
            query?: {
                description?: string;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSuppressedEmailsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getSuppressedEmailsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSuppressedEmailsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteSuppressedEmailsExport: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSuppressedEmailsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suppressedEmailsExportDownload: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadSuppressedEmailsExportResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: {
                version?: components["schemas"]["APIVersion"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_refreshToken"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPUnauthorizedError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPForbiddenError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createToken: {
        parameters: {
            query?: {
                version?: components["schemas"]["APIVersion"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_createToken"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"] | components["schemas"]["ChallengeResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPUnauthorizedError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPForbiddenError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createTokenFromChallenge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChallengeResponseRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPUnauthorizedError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPForbiddenError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getSelfUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
        };
    };
    forgotMyPassword: {
        parameters: {
            query?: {
                account_id?: number;
                language?: components["schemas"]["Languages"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotMyPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resetSelfPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
        };
    };
    resetUserPassword: {
        parameters: {
            query?: {
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetUserPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resetPasswordConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordConfirm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordConfirmResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Valid Terms:
                 *       - `email`
                 *       - `status`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                skip_verification?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suspendUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuspendUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unsuspendUser: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuspendUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirmUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserConfirmation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resendUserVerification: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResendUserVerificationEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listMfa: {
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListMFAResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createMfa: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMFARequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateMFAResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activateMfa: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mfa_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivateMFARequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivateMFAResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getMfaRecoveryCodes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecoveryCodesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
        };
    };
    getMfaPortal: {
        parameters: {
            query?: {
                return_url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMFAPortalResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteMfa: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mfa_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteMFAResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listAccounts: {
        parameters: {
            query?: {
                partner_account_id?: number;
                recursive?: boolean;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `created_on` */
                sort?: string;
                /** @description Valid Terms:
                 *       - `name`
                 *       - `status`
                 *
                 *     Valid Operators:
                 *       - `==`
                 *
                 *     Query separator:
                 *       - `;` */
                filter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createAccount: {
        parameters: {
            query?: {
                partner_account_id?: number;
                skip_verification?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suspendAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuspendAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unsuspendAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnsuspendAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirmAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmAccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resendAccountVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResendVerificationEmail"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResendAccountVerificationEmailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    convertAccountToOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConvertAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listWorkflows: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `description`
                 *       - `goal`
                 *       - `status`
                 *       - `created_on`
                 *       - `updated_on`
                 *       - `activated_on` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListWorkflowsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workflow"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchWorkflow"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activateWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
                sender_email?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivateWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivateWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                /** @description Locking key, preventing other users from modifying this workflow for a short period. */
                lock_key?: string;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeactivateWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    lockWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LockWorkflow"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlockWorkflow: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnlockWorkflow"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnlockWorkflowResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listWorkflowBlueprints: {
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `description`
                 *       - `goal`
                 *       - `created_on`
                 *       - `updated_on` */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowBlueprintsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getWorkflowBlueprint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowBlueprintResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listWorkflowBlueprintActions: {
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
                /** @description Sort term and direction, using syntax `[-|+]term`.
                 *
                 *     Valid terms:
                 *       - `name`
                 *       - `created_on` */
                sort?: string;
            };
            header?: never;
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getWorkflowBlueprintAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blueprint_id: string;
                action_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowBlueprintActionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showSystemEmails: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemEmailsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    setSystemEmails: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SystemEmailsTemplates"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PutSystemEmailsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchSystemEmails: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SystemEmailsTemplates"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PutSystemEmailsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listWebhooks: {
        parameters: {
            query?: {
                with_archived?: boolean;
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListWebhooksResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createWebhook: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWebhook"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateWebhookResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    archiveWebhook: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchiveWebhookResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unarchiveWebhook: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnArchiveWebhookResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getWebhook: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchWebhook: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchWebhook"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchWebhookResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    showTag: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTagResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patchTag: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path: {
                tag: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchTag"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatchTagResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    listTags: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
                page?: number;
                per_page?: number;
                /** @description Include count in the response */
                with_count?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: {
                /** @description Optional Account ID to be used for the request */
                account_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTag"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTagResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPBadRequestError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
